syntax = "proto2";

package pro.beam.interactive;

option java_package = "pro.beam.interactive.net.packet";
option java_outer_classname = "Protocol";

// Handshake MUST be the first message sent from clients to servers.
// After sending it, they should wait for a HandshakeACK, which will
// contain authentication status.
message Handshake {
    // Channel ID you want to connect as.
    required uint32 channel = 1;
    // That channel's stream key
    required string streamKey = 2;
}

// This is sent from the server to the client in response to a
// Handshake message. It's only send on a successful handshake.
// In other cases, an error will be sent.
message HandshakeACK {}

// The Report is send down to the streamer's computer at the
// reportFrequency, containing information about connected
// clients and their actions.
message Report {
    // Unix seconds timestamp in milliseconds that this report was sent at.
    required uint32 time = 1;
    required Users users = 2;

    // Contains information about the users connected to the stream.
    message Users {
        // Total number of users connected to the stream.
        required uint32 connected = 1;
        // Number of users who gave any kind of input in the last
        // 30 seconds.
        required uint32 quorum = 2;
        // Number of users who gave input in *this* report interval.
        required uint32 active = 3;

        // User activity is reported in a histographic fashion via a
        // sequence of QGrams, which record the number of users who gave
        // any sort of input in the last (now - delta) milliseconds.
        message QGram {
            required uint32 delta = 1;
            required uint32 users = 2;
        }

        repeated QGram qgram = 4;
    }

    // Reports for the Joystick input type.
    message JoystickInfo {
        required uint32 id = 1;

        message Data {
            required double X = 1;
            required double Y = 2;
        }

        // Cordinates analysis, if requested.
        optional Data coordMean = 2;
        optional Data coordStddev = 3;
    }
    repeated JoystickInfo joystick = 3;

    // Reports for the Tactile input type.
    message TactileInfo {
        required uint32 id = 1;

        // analysis on how many users are holding and pressing releasing
        // the buttons, if requested.
        optional double holding = 2;
        optional double pressFrequency = 3;
        optional double releaseFrequency = 4;
    }
    repeated TactileInfo tactile = 4;


    // Reports for the ScreenCoords input type.
    message ScreenCoordsInfo {
        required uint32 id = 1;

        // Cordinates analysis, if requested.
        optional double coordMean = 2;
        optional double coordStdev = 3;
    }
    repeated ScreenCoordsInfo screenCoords = 5;


    // Reports for the ScreenCoords input type.
    message ScreenPressInfo {
        required uint32 id = 1;

        // analysis on how many users are holding and pressing releasing
        // the buttons, if requested.
        optional double holding = 2;
        optional double pressFrequency = 3;
        optional double releaseFrequency = 4;
    }
    repeated ScreenPressInfo screenPress = 6;
}

// An error in response to some invalid input or event.
message Error {
    required string message = 1;
}

// A ProgressUpdate message may be sent up periodically from
// the Robot. It contains an array of objects to update the
// multiple controls on the frontend.
message ProgressUpdate {
    // State to change to. States with the given state in their `states` array
    // will be visible. If not passed, the state will not be changed.
    // The default state at initialization of the robot is simply "default".
    optional string state = 3;

    message JoystickUpdate {
        // The ID of the joystick control to update
        required uint32 id = 1;

        // The angle to move the "pointer" that appears around the joystick
        // to. This is usually used to indicate the average direction that
        // users pointing to. This is given in radians, in the range
        // [0, 2Ï€), with the same alignment as the standard unit circle.
        optional double angle = 2;
        // Intensity the pointer should appear at. This is often used to
        // indicate how strongly users are moving in a direction.
        // Should be given in the range [0, 1].
        optional double intensity = 3;
    }
    repeated JoystickUpdate joystick = 1;

    message TactileUpdate {
        // The ID of the tactile control to update
        required uint32 id = 1;

        // Starts a cooldown for all users, with a duration given in milliseconds.
        // Users will not be able to press the button until the cooldown is
        // over. Users who currently are pressing the button will be marked
        // as having released it. Sending another cooldown before the first
        // is over sets the cooldown's duration. The cooldown duration will
        // decrement automatically.
        optional uint32 cooldown = 2;

        // Marks the button has having been fired, showing a "pulse"
        // on the Beam frontend.
        optional bool fired = 3;

        // Sets the progress of the button toward some threshold, appearing
        // as a sort of progress bar on the frontend. Should be given in the
        // range [0, 1].
        optional double progress = 4;
    }
    repeated TactileUpdate tactile = 2;
}
