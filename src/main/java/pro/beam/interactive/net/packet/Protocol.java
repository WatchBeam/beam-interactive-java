// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/resources/tetris.proto

package pro.beam.interactive.net.packet;

public final class Protocol {
  private Protocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface HandshakeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Handshake)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    boolean hasChannel();
    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    int getChannel();

    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    boolean hasStreamKey();
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    java.lang.String getStreamKey();
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    com.google.protobuf.ByteString
        getStreamKeyBytes();
  }
  /**
   * Protobuf type {@code pro.beam.interactive.Handshake}
   *
   * <pre>
   * Handshake MUST be the first message sent from clients to servers.
   * After sending it, they should wait for a HandshakeACK, which will
   * contain authentication status.
   * </pre>
   */
  public  static final class Handshake extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.Handshake)
      HandshakeOrBuilder {
    // Use Handshake.newBuilder() to construct.
    private Handshake(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Handshake() {
      channel_ = 0;
      streamKey_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Handshake(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              channel_ = input.readUInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              streamKey_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.Handshake.class, pro.beam.interactive.net.packet.Protocol.Handshake.Builder.class);
    }

    private int bitField0_;
    public static final int CHANNEL_FIELD_NUMBER = 1;
    private int channel_;
    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    public boolean hasChannel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    public int getChannel() {
      return channel_;
    }

    public static final int STREAMKEY_FIELD_NUMBER = 2;
    private volatile java.lang.Object streamKey_;
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    public boolean hasStreamKey() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    public java.lang.String getStreamKey() {
      java.lang.Object ref = streamKey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          streamKey_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStreamKeyBytes() {
      java.lang.Object ref = streamKey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        streamKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChannel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStreamKey()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, channel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, streamKey_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, channel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, streamKey_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Handshake prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Handshake}
     *
     * <pre>
     * Handshake MUST be the first message sent from clients to servers.
     * After sending it, they should wait for a HandshakeACK, which will
     * contain authentication status.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Handshake)
        pro.beam.interactive.net.packet.Protocol.HandshakeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Handshake.class, pro.beam.interactive.net.packet.Protocol.Handshake.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.Handshake.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        channel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        streamKey_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.Handshake getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.Handshake.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.Handshake build() {
        pro.beam.interactive.net.packet.Protocol.Handshake result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.Handshake buildPartial() {
        pro.beam.interactive.net.packet.Protocol.Handshake result = new pro.beam.interactive.net.packet.Protocol.Handshake(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channel_ = channel_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.streamKey_ = streamKey_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.Handshake) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.Handshake)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Handshake other) {
        if (other == pro.beam.interactive.net.packet.Protocol.Handshake.getDefaultInstance()) return this;
        if (other.hasChannel()) {
          setChannel(other.getChannel());
        }
        if (other.hasStreamKey()) {
          bitField0_ |= 0x00000002;
          streamKey_ = other.streamKey_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChannel()) {
          return false;
        }
        if (!hasStreamKey()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.Handshake parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.Handshake) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int channel_ ;
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public boolean hasChannel() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public int getChannel() {
        return channel_;
      }
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public Builder setChannel(int value) {
        bitField0_ |= 0x00000001;
        channel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public Builder clearChannel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channel_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object streamKey_ = "";
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public boolean hasStreamKey() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public java.lang.String getStreamKey() {
        java.lang.Object ref = streamKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            streamKey_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStreamKeyBytes() {
        java.lang.Object ref = streamKey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          streamKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public Builder setStreamKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        streamKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public Builder clearStreamKey() {
        bitField0_ = (bitField0_ & ~0x00000002);
        streamKey_ = getDefaultInstance().getStreamKey();
        onChanged();
        return this;
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public Builder setStreamKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        streamKey_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Handshake)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.Handshake)
    private static final pro.beam.interactive.net.packet.Protocol.Handshake DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Handshake();
    }

    public static pro.beam.interactive.net.packet.Protocol.Handshake getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Handshake>
        PARSER = new com.google.protobuf.AbstractParser<Handshake>() {
      public Handshake parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Handshake(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Handshake> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Handshake> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.Handshake getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HandshakeACKOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.HandshakeACK)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code pro.beam.interactive.HandshakeACK}
   *
   * <pre>
   * This is sent from the server to the client in response to a
   * Handshake message. It's only send on a successful handshake.
   * In other cases, an error will be sent.
   * </pre>
   */
  public  static final class HandshakeACK extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.HandshakeACK)
      HandshakeACKOrBuilder {
    // Use HandshakeACK.newBuilder() to construct.
    private HandshakeACK(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private HandshakeACK() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HandshakeACK(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.HandshakeACK.class, pro.beam.interactive.net.packet.Protocol.HandshakeACK.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.HandshakeACK prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.HandshakeACK}
     *
     * <pre>
     * This is sent from the server to the client in response to a
     * Handshake message. It's only send on a successful handshake.
     * In other cases, an error will be sent.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.HandshakeACK)
        pro.beam.interactive.net.packet.Protocol.HandshakeACKOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.HandshakeACK.class, pro.beam.interactive.net.packet.Protocol.HandshakeACK.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.HandshakeACK.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.HandshakeACK getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.HandshakeACK.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.HandshakeACK build() {
        pro.beam.interactive.net.packet.Protocol.HandshakeACK result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.HandshakeACK buildPartial() {
        pro.beam.interactive.net.packet.Protocol.HandshakeACK result = new pro.beam.interactive.net.packet.Protocol.HandshakeACK(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.HandshakeACK) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.HandshakeACK)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.HandshakeACK other) {
        if (other == pro.beam.interactive.net.packet.Protocol.HandshakeACK.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.HandshakeACK parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.HandshakeACK) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.HandshakeACK)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.HandshakeACK)
    private static final pro.beam.interactive.net.packet.Protocol.HandshakeACK DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.HandshakeACK();
    }

    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<HandshakeACK>
        PARSER = new com.google.protobuf.AbstractParser<HandshakeACK>() {
      public HandshakeACK parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new HandshakeACK(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<HandshakeACK> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HandshakeACK> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.HandshakeACK getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReportOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     * Unix seconds timestamp in milliseconds that this report was sent at.
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     * Unix seconds timestamp in milliseconds that this report was sent at.
     * </pre>
     */
    int getTime();

    /**
     * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
     */
    boolean hasUsers();
    /**
     * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.Users getUsers();
    /**
     * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.UsersOrBuilder getUsersOrBuilder();

    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> 
        getJoystickList();
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getJoystick(int index);
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    int getJoystickCount();
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
        getJoystickOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder getJoystickOrBuilder(
        int index);

    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> 
        getTactileList();
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getTactile(int index);
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    int getTactileCount();
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
        getTactileOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder getTactileOrBuilder(
        int index);

    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo> 
        getScreenCoordsList();
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo getScreenCoords(int index);
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    int getScreenCoordsCount();
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder> 
        getScreenCoordsOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder getScreenCoordsOrBuilder(
        int index);

    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo> 
        getScreenPressList();
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo getScreenPress(int index);
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    int getScreenPressCount();
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder> 
        getScreenPressOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder getScreenPressOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pro.beam.interactive.Report}
   *
   * <pre>
   * The Report is send down to the streamer's computer at the
   * reportFrequency, containing information about connected
   * clients and their actions.
   * </pre>
   */
  public  static final class Report extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report)
      ReportOrBuilder {
    // Use Report.newBuilder() to construct.
    private Report(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Report() {
      time_ = 0;
      joystick_ = java.util.Collections.emptyList();
      tactile_ = java.util.Collections.emptyList();
      screenCoords_ = java.util.Collections.emptyList();
      screenPress_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Report(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              time_ = input.readUInt32();
              break;
            }
            case 18: {
              pro.beam.interactive.net.packet.Protocol.Report.Users.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = users_.toBuilder();
              }
              users_ = input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.Users.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(users_);
                users_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                joystick_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo>();
                mutable_bitField0_ |= 0x00000004;
              }
              joystick_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                tactile_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo>();
                mutable_bitField0_ |= 0x00000008;
              }
              tactile_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                screenCoords_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo>();
                mutable_bitField0_ |= 0x00000010;
              }
              screenCoords_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.parser(), extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                screenPress_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo>();
                mutable_bitField0_ |= 0x00000020;
              }
              screenPress_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          joystick_ = java.util.Collections.unmodifiableList(joystick_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          tactile_ = java.util.Collections.unmodifiableList(tactile_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          screenCoords_ = java.util.Collections.unmodifiableList(screenCoords_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          screenPress_ = java.util.Collections.unmodifiableList(screenPress_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.Report.class, pro.beam.interactive.net.packet.Protocol.Report.Builder.class);
    }

    public interface UsersOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.Users)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 connected = 1;</code>
       *
       * <pre>
       * Total number of users connected to the stream.
       * </pre>
       */
      boolean hasConnected();
      /**
       * <code>required uint32 connected = 1;</code>
       *
       * <pre>
       * Total number of users connected to the stream.
       * </pre>
       */
      int getConnected();

      /**
       * <code>required uint32 quorum = 2;</code>
       *
       * <pre>
       * Number of users who gave any kind of input in the last
       * 30 seconds.
       * </pre>
       */
      boolean hasQuorum();
      /**
       * <code>required uint32 quorum = 2;</code>
       *
       * <pre>
       * Number of users who gave any kind of input in the last
       * 30 seconds.
       * </pre>
       */
      int getQuorum();

      /**
       * <code>required uint32 active = 3;</code>
       *
       * <pre>
       * Number of users who gave input in *this* report interval.
       * </pre>
       */
      boolean hasActive();
      /**
       * <code>required uint32 active = 3;</code>
       *
       * <pre>
       * Number of users who gave input in *this* report interval.
       * </pre>
       */
      int getActive();

      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      java.util.List<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram> 
          getQgramList();
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.Users.QGram getQgram(int index);
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      int getQgramCount();
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder> 
          getQgramOrBuilderList();
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder getQgramOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.Users}
     *
     * <pre>
     * Contains information about the users connected to the stream.
     * </pre>
     */
    public  static final class Users extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.Users)
        UsersOrBuilder {
      // Use Users.newBuilder() to construct.
      private Users(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Users() {
        connected_ = 0;
        quorum_ = 0;
        active_ = 0;
        qgram_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Users(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                connected_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                quorum_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                active_ = input.readUInt32();
                break;
              }
              case 34: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  qgram_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram>();
                  mutable_bitField0_ |= 0x00000008;
                }
                qgram_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            qgram_ = java.util.Collections.unmodifiableList(qgram_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.Users.class, pro.beam.interactive.net.packet.Protocol.Report.Users.Builder.class);
      }

      public interface QGramOrBuilder extends
          // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.Users.QGram)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint32 delta = 1;</code>
         */
        boolean hasDelta();
        /**
         * <code>required uint32 delta = 1;</code>
         */
        int getDelta();

        /**
         * <code>required uint32 users = 2;</code>
         */
        boolean hasUsers();
        /**
         * <code>required uint32 users = 2;</code>
         */
        int getUsers();
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.Users.QGram}
       *
       * <pre>
       * User activity is reported in a histographic fashion via a
       * sequence of QGrams, which record the number of users who gave
       * any sort of input in the last (now - delta) milliseconds.
       * </pre>
       */
      public  static final class QGram extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.Users.QGram)
          QGramOrBuilder {
        // Use QGram.newBuilder() to construct.
        private QGram(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private QGram() {
          delta_ = 0;
          users_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private QGram(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
          this();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  delta_ = input.readUInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  users_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_QGram_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_QGram_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.class, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder.class);
        }

        private int bitField0_;
        public static final int DELTA_FIELD_NUMBER = 1;
        private int delta_;
        /**
         * <code>required uint32 delta = 1;</code>
         */
        public boolean hasDelta() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 delta = 1;</code>
         */
        public int getDelta() {
          return delta_;
        }

        public static final int USERS_FIELD_NUMBER = 2;
        private int users_;
        /**
         * <code>required uint32 users = 2;</code>
         */
        public boolean hasUsers() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required uint32 users = 2;</code>
         */
        public int getUsers() {
          return users_;
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          if (!hasDelta()) {
            memoizedIsInitialized = 0;
            return false;
          }
          if (!hasUsers()) {
            memoizedIsInitialized = 0;
            return false;
          }
          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeUInt32(1, delta_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeUInt32(2, users_);
          }
          unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(1, delta_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(2, users_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.Users.QGram prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code pro.beam.interactive.Report.Users.QGram}
         *
         * <pre>
         * User activity is reported in a histographic fashion via a
         * sequence of QGrams, which record the number of users who gave
         * any sort of input in the last (now - delta) milliseconds.
         * </pre>
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.Users.QGram)
            pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_QGram_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_QGram_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.class, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder.class);
          }

          // Construct using pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            }
          }
          public Builder clear() {
            super.clear();
            delta_ = 0;
            bitField0_ = (bitField0_ & ~0x00000001);
            users_ = 0;
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_QGram_descriptor;
          }

          public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram getDefaultInstanceForType() {
            return pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.getDefaultInstance();
          }

          public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram build() {
            pro.beam.interactive.net.packet.Protocol.Report.Users.QGram result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram buildPartial() {
            pro.beam.interactive.net.packet.Protocol.Report.Users.QGram result = new pro.beam.interactive.net.packet.Protocol.Report.Users.QGram(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.delta_ = delta_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            result.users_ = users_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.Users.QGram) {
              return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.Users.QGram)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.Users.QGram other) {
            if (other == pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.getDefaultInstance()) return this;
            if (other.hasDelta()) {
              setDelta(other.getDelta());
            }
            if (other.hasUsers()) {
              setUsers(other.getUsers());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          public final boolean isInitialized() {
            if (!hasDelta()) {
              return false;
            }
            if (!hasUsers()) {
              return false;
            }
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            pro.beam.interactive.net.packet.Protocol.Report.Users.QGram parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.Users.QGram) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private int delta_ ;
          /**
           * <code>required uint32 delta = 1;</code>
           */
          public boolean hasDelta() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>required uint32 delta = 1;</code>
           */
          public int getDelta() {
            return delta_;
          }
          /**
           * <code>required uint32 delta = 1;</code>
           */
          public Builder setDelta(int value) {
            bitField0_ |= 0x00000001;
            delta_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>required uint32 delta = 1;</code>
           */
          public Builder clearDelta() {
            bitField0_ = (bitField0_ & ~0x00000001);
            delta_ = 0;
            onChanged();
            return this;
          }

          private int users_ ;
          /**
           * <code>required uint32 users = 2;</code>
           */
          public boolean hasUsers() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>required uint32 users = 2;</code>
           */
          public int getUsers() {
            return users_;
          }
          /**
           * <code>required uint32 users = 2;</code>
           */
          public Builder setUsers(int value) {
            bitField0_ |= 0x00000002;
            users_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>required uint32 users = 2;</code>
           */
          public Builder clearUsers() {
            bitField0_ = (bitField0_ & ~0x00000002);
            users_ = 0;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.Users.QGram)
        }

        // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.Users.QGram)
        private static final pro.beam.interactive.net.packet.Protocol.Report.Users.QGram DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.Users.QGram();
        }

        public static pro.beam.interactive.net.packet.Protocol.Report.Users.QGram getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @java.lang.Deprecated public static final com.google.protobuf.Parser<QGram>
            PARSER = new com.google.protobuf.AbstractParser<QGram>() {
          public QGram parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            try {
              return new QGram(input, extensionRegistry);
            } catch (RuntimeException e) {
              if (e.getCause() instanceof
                  com.google.protobuf.InvalidProtocolBufferException) {
                throw (com.google.protobuf.InvalidProtocolBufferException)
                    e.getCause();
              }
              throw e;
            }
          }
        };

        public static com.google.protobuf.Parser<QGram> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<QGram> getParserForType() {
          return PARSER;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int CONNECTED_FIELD_NUMBER = 1;
      private int connected_;
      /**
       * <code>required uint32 connected = 1;</code>
       *
       * <pre>
       * Total number of users connected to the stream.
       * </pre>
       */
      public boolean hasConnected() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 connected = 1;</code>
       *
       * <pre>
       * Total number of users connected to the stream.
       * </pre>
       */
      public int getConnected() {
        return connected_;
      }

      public static final int QUORUM_FIELD_NUMBER = 2;
      private int quorum_;
      /**
       * <code>required uint32 quorum = 2;</code>
       *
       * <pre>
       * Number of users who gave any kind of input in the last
       * 30 seconds.
       * </pre>
       */
      public boolean hasQuorum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 quorum = 2;</code>
       *
       * <pre>
       * Number of users who gave any kind of input in the last
       * 30 seconds.
       * </pre>
       */
      public int getQuorum() {
        return quorum_;
      }

      public static final int ACTIVE_FIELD_NUMBER = 3;
      private int active_;
      /**
       * <code>required uint32 active = 3;</code>
       *
       * <pre>
       * Number of users who gave input in *this* report interval.
       * </pre>
       */
      public boolean hasActive() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 active = 3;</code>
       *
       * <pre>
       * Number of users who gave input in *this* report interval.
       * </pre>
       */
      public int getActive() {
        return active_;
      }

      public static final int QGRAM_FIELD_NUMBER = 4;
      private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram> qgram_;
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram> getQgramList() {
        return qgram_;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder> 
          getQgramOrBuilderList() {
        return qgram_;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      public int getQgramCount() {
        return qgram_.size();
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram getQgram(int index) {
        return qgram_.get(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder getQgramOrBuilder(
          int index) {
        return qgram_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasConnected()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasQuorum()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasActive()) {
          memoizedIsInitialized = 0;
          return false;
        }
        for (int i = 0; i < getQgramCount(); i++) {
          if (!getQgram(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, connected_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, quorum_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, active_);
        }
        for (int i = 0; i < qgram_.size(); i++) {
          output.writeMessage(4, qgram_.get(i));
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, connected_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, quorum_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, active_);
        }
        for (int i = 0; i < qgram_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, qgram_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Users parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.Users prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.Users}
       *
       * <pre>
       * Contains information about the users connected to the stream.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.Users)
          pro.beam.interactive.net.packet.Protocol.Report.UsersOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.Users.class, pro.beam.interactive.net.packet.Protocol.Report.Users.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.Users.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getQgramFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          connected_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          quorum_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          active_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          if (qgramBuilder_ == null) {
            qgram_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            qgramBuilder_.clear();
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Users_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.Users getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.Users.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.Users build() {
          pro.beam.interactive.net.packet.Protocol.Report.Users result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.Users buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.Users result = new pro.beam.interactive.net.packet.Protocol.Report.Users(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.connected_ = connected_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.quorum_ = quorum_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.active_ = active_;
          if (qgramBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              qgram_ = java.util.Collections.unmodifiableList(qgram_);
              bitField0_ = (bitField0_ & ~0x00000008);
            }
            result.qgram_ = qgram_;
          } else {
            result.qgram_ = qgramBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.Users) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.Users)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.Users other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.Users.getDefaultInstance()) return this;
          if (other.hasConnected()) {
            setConnected(other.getConnected());
          }
          if (other.hasQuorum()) {
            setQuorum(other.getQuorum());
          }
          if (other.hasActive()) {
            setActive(other.getActive());
          }
          if (qgramBuilder_ == null) {
            if (!other.qgram_.isEmpty()) {
              if (qgram_.isEmpty()) {
                qgram_ = other.qgram_;
                bitField0_ = (bitField0_ & ~0x00000008);
              } else {
                ensureQgramIsMutable();
                qgram_.addAll(other.qgram_);
              }
              onChanged();
            }
          } else {
            if (!other.qgram_.isEmpty()) {
              if (qgramBuilder_.isEmpty()) {
                qgramBuilder_.dispose();
                qgramBuilder_ = null;
                qgram_ = other.qgram_;
                bitField0_ = (bitField0_ & ~0x00000008);
                qgramBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getQgramFieldBuilder() : null;
              } else {
                qgramBuilder_.addAllMessages(other.qgram_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasConnected()) {
            return false;
          }
          if (!hasQuorum()) {
            return false;
          }
          if (!hasActive()) {
            return false;
          }
          for (int i = 0; i < getQgramCount(); i++) {
            if (!getQgram(i).isInitialized()) {
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.Users parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.Users) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int connected_ ;
        /**
         * <code>required uint32 connected = 1;</code>
         *
         * <pre>
         * Total number of users connected to the stream.
         * </pre>
         */
        public boolean hasConnected() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 connected = 1;</code>
         *
         * <pre>
         * Total number of users connected to the stream.
         * </pre>
         */
        public int getConnected() {
          return connected_;
        }
        /**
         * <code>required uint32 connected = 1;</code>
         *
         * <pre>
         * Total number of users connected to the stream.
         * </pre>
         */
        public Builder setConnected(int value) {
          bitField0_ |= 0x00000001;
          connected_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 connected = 1;</code>
         *
         * <pre>
         * Total number of users connected to the stream.
         * </pre>
         */
        public Builder clearConnected() {
          bitField0_ = (bitField0_ & ~0x00000001);
          connected_ = 0;
          onChanged();
          return this;
        }

        private int quorum_ ;
        /**
         * <code>required uint32 quorum = 2;</code>
         *
         * <pre>
         * Number of users who gave any kind of input in the last
         * 30 seconds.
         * </pre>
         */
        public boolean hasQuorum() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required uint32 quorum = 2;</code>
         *
         * <pre>
         * Number of users who gave any kind of input in the last
         * 30 seconds.
         * </pre>
         */
        public int getQuorum() {
          return quorum_;
        }
        /**
         * <code>required uint32 quorum = 2;</code>
         *
         * <pre>
         * Number of users who gave any kind of input in the last
         * 30 seconds.
         * </pre>
         */
        public Builder setQuorum(int value) {
          bitField0_ |= 0x00000002;
          quorum_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 quorum = 2;</code>
         *
         * <pre>
         * Number of users who gave any kind of input in the last
         * 30 seconds.
         * </pre>
         */
        public Builder clearQuorum() {
          bitField0_ = (bitField0_ & ~0x00000002);
          quorum_ = 0;
          onChanged();
          return this;
        }

        private int active_ ;
        /**
         * <code>required uint32 active = 3;</code>
         *
         * <pre>
         * Number of users who gave input in *this* report interval.
         * </pre>
         */
        public boolean hasActive() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required uint32 active = 3;</code>
         *
         * <pre>
         * Number of users who gave input in *this* report interval.
         * </pre>
         */
        public int getActive() {
          return active_;
        }
        /**
         * <code>required uint32 active = 3;</code>
         *
         * <pre>
         * Number of users who gave input in *this* report interval.
         * </pre>
         */
        public Builder setActive(int value) {
          bitField0_ |= 0x00000004;
          active_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 active = 3;</code>
         *
         * <pre>
         * Number of users who gave input in *this* report interval.
         * </pre>
         */
        public Builder clearActive() {
          bitField0_ = (bitField0_ & ~0x00000004);
          active_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram> qgram_ =
          java.util.Collections.emptyList();
        private void ensureQgramIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            qgram_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram>(qgram_);
            bitField0_ |= 0x00000008;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Users.QGram, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder, pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder> qgramBuilder_;

        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram> getQgramList() {
          if (qgramBuilder_ == null) {
            return java.util.Collections.unmodifiableList(qgram_);
          } else {
            return qgramBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public int getQgramCount() {
          if (qgramBuilder_ == null) {
            return qgram_.size();
          } else {
            return qgramBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram getQgram(int index) {
          if (qgramBuilder_ == null) {
            return qgram_.get(index);
          } else {
            return qgramBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder setQgram(
            int index, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram value) {
          if (qgramBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureQgramIsMutable();
            qgram_.set(index, value);
            onChanged();
          } else {
            qgramBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder setQgram(
            int index, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder builderForValue) {
          if (qgramBuilder_ == null) {
            ensureQgramIsMutable();
            qgram_.set(index, builderForValue.build());
            onChanged();
          } else {
            qgramBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder addQgram(pro.beam.interactive.net.packet.Protocol.Report.Users.QGram value) {
          if (qgramBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureQgramIsMutable();
            qgram_.add(value);
            onChanged();
          } else {
            qgramBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder addQgram(
            int index, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram value) {
          if (qgramBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureQgramIsMutable();
            qgram_.add(index, value);
            onChanged();
          } else {
            qgramBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder addQgram(
            pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder builderForValue) {
          if (qgramBuilder_ == null) {
            ensureQgramIsMutable();
            qgram_.add(builderForValue.build());
            onChanged();
          } else {
            qgramBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder addQgram(
            int index, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder builderForValue) {
          if (qgramBuilder_ == null) {
            ensureQgramIsMutable();
            qgram_.add(index, builderForValue.build());
            onChanged();
          } else {
            qgramBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder addAllQgram(
            java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.Report.Users.QGram> values) {
          if (qgramBuilder_ == null) {
            ensureQgramIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, qgram_);
            onChanged();
          } else {
            qgramBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder clearQgram() {
          if (qgramBuilder_ == null) {
            qgram_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
          } else {
            qgramBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public Builder removeQgram(int index) {
          if (qgramBuilder_ == null) {
            ensureQgramIsMutable();
            qgram_.remove(index);
            onChanged();
          } else {
            qgramBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder getQgramBuilder(
            int index) {
          return getQgramFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder getQgramOrBuilder(
            int index) {
          if (qgramBuilder_ == null) {
            return qgram_.get(index);  } else {
            return qgramBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder> 
             getQgramOrBuilderList() {
          if (qgramBuilder_ != null) {
            return qgramBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(qgram_);
          }
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder addQgramBuilder() {
          return getQgramFieldBuilder().addBuilder(
              pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.getDefaultInstance());
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder addQgramBuilder(
            int index) {
          return getQgramFieldBuilder().addBuilder(
              index, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.getDefaultInstance());
        }
        /**
         * <code>repeated .pro.beam.interactive.Report.Users.QGram qgram = 4;</code>
         */
        public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder> 
             getQgramBuilderList() {
          return getQgramFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Users.QGram, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder, pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder> 
            getQgramFieldBuilder() {
          if (qgramBuilder_ == null) {
            qgramBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                pro.beam.interactive.net.packet.Protocol.Report.Users.QGram, pro.beam.interactive.net.packet.Protocol.Report.Users.QGram.Builder, pro.beam.interactive.net.packet.Protocol.Report.Users.QGramOrBuilder>(
                    qgram_,
                    ((bitField0_ & 0x00000008) == 0x00000008),
                    getParentForChildren(),
                    isClean());
            qgram_ = null;
          }
          return qgramBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.Users)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.Users)
      private static final pro.beam.interactive.net.packet.Protocol.Report.Users DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.Users();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.Users getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Users>
          PARSER = new com.google.protobuf.AbstractParser<Users>() {
        public Users parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Users(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Users> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Users> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.Users getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface JoystickInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.JoystickInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>required uint32 id = 1;</code>
       */
      int getId();

      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      boolean hasCoordMean();
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getCoordMean();
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder getCoordMeanOrBuilder();

      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
       */
      boolean hasCoordStddev();
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getCoordStddev();
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder getCoordStddevOrBuilder();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.JoystickInfo}
     *
     * <pre>
     * Reports for the Joystick input type.
     * </pre>
     */
    public  static final class JoystickInfo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.JoystickInfo)
        JoystickInfoOrBuilder {
      // Use JoystickInfo.newBuilder() to construct.
      private JoystickInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private JoystickInfo() {
        id_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private JoystickInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 18: {
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = coordMean_.toBuilder();
                }
                coordMean_ = input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(coordMean_);
                  coordMean_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = coordStddev_.toBuilder();
                }
                coordStddev_ = input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(coordStddev_);
                  coordStddev_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.class, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder.class);
      }

      public interface DataOrBuilder extends
          // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.JoystickInfo.Data)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required double X = 1;</code>
         */
        boolean hasX();
        /**
         * <code>required double X = 1;</code>
         */
        double getX();

        /**
         * <code>required double Y = 2;</code>
         */
        boolean hasY();
        /**
         * <code>required double Y = 2;</code>
         */
        double getY();
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.JoystickInfo.Data}
       */
      public  static final class Data extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.JoystickInfo.Data)
          DataOrBuilder {
        // Use Data.newBuilder() to construct.
        private Data(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private Data() {
          x_ = 0D;
          y_ = 0D;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private Data(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
          this();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 9: {
                  bitField0_ |= 0x00000001;
                  x_ = input.readDouble();
                  break;
                }
                case 17: {
                  bitField0_ |= 0x00000002;
                  y_ = input.readDouble();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_Data_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_Data_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.class, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder.class);
        }

        private int bitField0_;
        public static final int X_FIELD_NUMBER = 1;
        private double x_;
        /**
         * <code>required double X = 1;</code>
         */
        public boolean hasX() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required double X = 1;</code>
         */
        public double getX() {
          return x_;
        }

        public static final int Y_FIELD_NUMBER = 2;
        private double y_;
        /**
         * <code>required double Y = 2;</code>
         */
        public boolean hasY() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required double Y = 2;</code>
         */
        public double getY() {
          return y_;
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          if (!hasX()) {
            memoizedIsInitialized = 0;
            return false;
          }
          if (!hasY()) {
            memoizedIsInitialized = 0;
            return false;
          }
          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeDouble(1, x_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeDouble(2, y_);
          }
          unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeDoubleSize(1, x_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
              .computeDoubleSize(2, y_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code pro.beam.interactive.Report.JoystickInfo.Data}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.JoystickInfo.Data)
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_Data_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_Data_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.class, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder.class);
          }

          // Construct using pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            }
          }
          public Builder clear() {
            super.clear();
            x_ = 0D;
            bitField0_ = (bitField0_ & ~0x00000001);
            y_ = 0D;
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_Data_descriptor;
          }

          public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getDefaultInstanceForType() {
            return pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance();
          }

          public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data build() {
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data buildPartial() {
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data result = new pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.x_ = x_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            result.y_ = y_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data) {
              return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data other) {
            if (other == pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance()) return this;
            if (other.hasX()) {
              setX(other.getX());
            }
            if (other.hasY()) {
              setY(other.getY());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          public final boolean isInitialized() {
            if (!hasX()) {
              return false;
            }
            if (!hasY()) {
              return false;
            }
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private double x_ ;
          /**
           * <code>required double X = 1;</code>
           */
          public boolean hasX() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>required double X = 1;</code>
           */
          public double getX() {
            return x_;
          }
          /**
           * <code>required double X = 1;</code>
           */
          public Builder setX(double value) {
            bitField0_ |= 0x00000001;
            x_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>required double X = 1;</code>
           */
          public Builder clearX() {
            bitField0_ = (bitField0_ & ~0x00000001);
            x_ = 0D;
            onChanged();
            return this;
          }

          private double y_ ;
          /**
           * <code>required double Y = 2;</code>
           */
          public boolean hasY() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>required double Y = 2;</code>
           */
          public double getY() {
            return y_;
          }
          /**
           * <code>required double Y = 2;</code>
           */
          public Builder setY(double value) {
            bitField0_ |= 0x00000002;
            y_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>required double Y = 2;</code>
           */
          public Builder clearY() {
            bitField0_ = (bitField0_ & ~0x00000002);
            y_ = 0D;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.JoystickInfo.Data)
        }

        // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.JoystickInfo.Data)
        private static final pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data();
        }

        public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        @java.lang.Deprecated public static final com.google.protobuf.Parser<Data>
            PARSER = new com.google.protobuf.AbstractParser<Data>() {
          public Data parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            try {
              return new Data(input, extensionRegistry);
            } catch (RuntimeException e) {
              if (e.getCause() instanceof
                  com.google.protobuf.InvalidProtocolBufferException) {
                throw (com.google.protobuf.InvalidProtocolBufferException)
                    e.getCause();
              }
              throw e;
            }
          }
        };

        public static com.google.protobuf.Parser<Data> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Data> getParserForType() {
          return PARSER;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      public static final int COORDMEAN_FIELD_NUMBER = 2;
      private pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data coordMean_;
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      public boolean hasCoordMean() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getCoordMean() {
        return coordMean_ == null ? pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordMean_;
      }
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder getCoordMeanOrBuilder() {
        return coordMean_ == null ? pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordMean_;
      }

      public static final int COORDSTDDEV_FIELD_NUMBER = 3;
      private pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data coordStddev_;
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
       */
      public boolean hasCoordStddev() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getCoordStddev() {
        return coordStddev_ == null ? pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordStddev_;
      }
      /**
       * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder getCoordStddevOrBuilder() {
        return coordStddev_ == null ? pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordStddev_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (hasCoordMean()) {
          if (!getCoordMean().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasCoordStddev()) {
          if (!getCoordStddev().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, getCoordMean());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, getCoordStddev());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getCoordMean());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getCoordStddev());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.JoystickInfo}
       *
       * <pre>
       * Reports for the Joystick input type.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.JoystickInfo)
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.class, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getCoordMeanFieldBuilder();
            getCoordStddevFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (coordMeanBuilder_ == null) {
            coordMean_ = null;
          } else {
            coordMeanBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (coordStddevBuilder_ == null) {
            coordStddev_ = null;
          } else {
            coordStddevBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo build() {
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo result = new pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (coordMeanBuilder_ == null) {
            result.coordMean_ = coordMean_;
          } else {
            result.coordMean_ = coordMeanBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (coordStddevBuilder_ == null) {
            result.coordStddev_ = coordStddev_;
          } else {
            result.coordStddev_ = coordStddevBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasCoordMean()) {
            mergeCoordMean(other.getCoordMean());
          }
          if (other.hasCoordStddev()) {
            mergeCoordStddev(other.getCoordStddev());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasId()) {
            return false;
          }
          if (hasCoordMean()) {
            if (!getCoordMean().isInitialized()) {
              return false;
            }
          }
          if (hasCoordStddev()) {
            if (!getCoordStddev().isInitialized()) {
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int id_ ;
        /**
         * <code>required uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        private pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data coordMean_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder> coordMeanBuilder_;
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public boolean hasCoordMean() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getCoordMean() {
          if (coordMeanBuilder_ == null) {
            return coordMean_ == null ? pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordMean_;
          } else {
            return coordMeanBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public Builder setCoordMean(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data value) {
          if (coordMeanBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            coordMean_ = value;
            onChanged();
          } else {
            coordMeanBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public Builder setCoordMean(
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder builderForValue) {
          if (coordMeanBuilder_ == null) {
            coordMean_ = builderForValue.build();
            onChanged();
          } else {
            coordMeanBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public Builder mergeCoordMean(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data value) {
          if (coordMeanBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                coordMean_ != null &&
                coordMean_ != pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance()) {
              coordMean_ =
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.newBuilder(coordMean_).mergeFrom(value).buildPartial();
            } else {
              coordMean_ = value;
            }
            onChanged();
          } else {
            coordMeanBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public Builder clearCoordMean() {
          if (coordMeanBuilder_ == null) {
            coordMean_ = null;
            onChanged();
          } else {
            coordMeanBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder getCoordMeanBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getCoordMeanFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder getCoordMeanOrBuilder() {
          if (coordMeanBuilder_ != null) {
            return coordMeanBuilder_.getMessageOrBuilder();
          } else {
            return coordMean_ == null ?
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordMean_;
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder> 
            getCoordMeanFieldBuilder() {
          if (coordMeanBuilder_ == null) {
            coordMeanBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder>(
                    getCoordMean(),
                    getParentForChildren(),
                    isClean());
            coordMean_ = null;
          }
          return coordMeanBuilder_;
        }

        private pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data coordStddev_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder> coordStddevBuilder_;
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public boolean hasCoordStddev() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data getCoordStddev() {
          if (coordStddevBuilder_ == null) {
            return coordStddev_ == null ? pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordStddev_;
          } else {
            return coordStddevBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public Builder setCoordStddev(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data value) {
          if (coordStddevBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            coordStddev_ = value;
            onChanged();
          } else {
            coordStddevBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public Builder setCoordStddev(
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder builderForValue) {
          if (coordStddevBuilder_ == null) {
            coordStddev_ = builderForValue.build();
            onChanged();
          } else {
            coordStddevBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public Builder mergeCoordStddev(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data value) {
          if (coordStddevBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                coordStddev_ != null &&
                coordStddev_ != pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance()) {
              coordStddev_ =
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.newBuilder(coordStddev_).mergeFrom(value).buildPartial();
            } else {
              coordStddev_ = value;
            }
            onChanged();
          } else {
            coordStddevBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public Builder clearCoordStddev() {
          if (coordStddevBuilder_ == null) {
            coordStddev_ = null;
            onChanged();
          } else {
            coordStddevBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder getCoordStddevBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getCoordStddevFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder getCoordStddevOrBuilder() {
          if (coordStddevBuilder_ != null) {
            return coordStddevBuilder_.getMessageOrBuilder();
          } else {
            return coordStddev_ == null ?
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.getDefaultInstance() : coordStddev_;
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.JoystickInfo.Data coordStddev = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder> 
            getCoordStddevFieldBuilder() {
          if (coordStddevBuilder_ == null) {
            coordStddevBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Data.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.DataOrBuilder>(
                    getCoordStddev(),
                    getParentForChildren(),
                    isClean());
            coordStddev_ = null;
          }
          return coordStddevBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.JoystickInfo)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.JoystickInfo)
      private static final pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<JoystickInfo>
          PARSER = new com.google.protobuf.AbstractParser<JoystickInfo>() {
        public JoystickInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new JoystickInfo(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<JoystickInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<JoystickInfo> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TactileInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.TactileInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>required uint32 id = 1;</code>
       */
      int getId();

      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      boolean hasHolding();
      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      double getHolding();

      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      boolean hasPressFrequency();
      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      double getPressFrequency();

      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      boolean hasReleaseFrequency();
      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      double getReleaseFrequency();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.TactileInfo}
     *
     * <pre>
     * Reports for the Tactile input type.
     * </pre>
     */
    public  static final class TactileInfo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.TactileInfo)
        TactileInfoOrBuilder {
      // Use TactileInfo.newBuilder() to construct.
      private TactileInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TactileInfo() {
        id_ = 0;
        holding_ = 0D;
        pressFrequency_ = 0D;
        releaseFrequency_ = 0D;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TactileInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                holding_ = input.readDouble();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                pressFrequency_ = input.readDouble();
                break;
              }
              case 33: {
                bitField0_ |= 0x00000008;
                releaseFrequency_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.class, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      public static final int HOLDING_FIELD_NUMBER = 2;
      private double holding_;
      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      public boolean hasHolding() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      public double getHolding() {
        return holding_;
      }

      public static final int PRESSFREQUENCY_FIELD_NUMBER = 3;
      private double pressFrequency_;
      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      public boolean hasPressFrequency() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      public double getPressFrequency() {
        return pressFrequency_;
      }

      public static final int RELEASEFREQUENCY_FIELD_NUMBER = 4;
      private double releaseFrequency_;
      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      public boolean hasReleaseFrequency() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      public double getReleaseFrequency() {
        return releaseFrequency_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, holding_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, pressFrequency_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeDouble(4, releaseFrequency_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, holding_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, pressFrequency_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, releaseFrequency_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.TactileInfo}
       *
       * <pre>
       * Reports for the Tactile input type.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.TactileInfo)
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.class, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          holding_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000002);
          pressFrequency_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          releaseFrequency_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo build() {
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo result = new pro.beam.interactive.net.packet.Protocol.Report.TactileInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.holding_ = holding_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.pressFrequency_ = pressFrequency_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.releaseFrequency_ = releaseFrequency_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.TactileInfo) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.TactileInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasHolding()) {
            setHolding(other.getHolding());
          }
          if (other.hasPressFrequency()) {
            setPressFrequency(other.getPressFrequency());
          }
          if (other.hasReleaseFrequency()) {
            setReleaseFrequency(other.getReleaseFrequency());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasId()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.TactileInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int id_ ;
        /**
         * <code>required uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        private double holding_ ;
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public boolean hasHolding() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public double getHolding() {
          return holding_;
        }
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public Builder setHolding(double value) {
          bitField0_ |= 0x00000002;
          holding_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public Builder clearHolding() {
          bitField0_ = (bitField0_ & ~0x00000002);
          holding_ = 0D;
          onChanged();
          return this;
        }

        private double pressFrequency_ ;
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public boolean hasPressFrequency() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public double getPressFrequency() {
          return pressFrequency_;
        }
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public Builder setPressFrequency(double value) {
          bitField0_ |= 0x00000004;
          pressFrequency_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public Builder clearPressFrequency() {
          bitField0_ = (bitField0_ & ~0x00000004);
          pressFrequency_ = 0D;
          onChanged();
          return this;
        }

        private double releaseFrequency_ ;
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public boolean hasReleaseFrequency() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public double getReleaseFrequency() {
          return releaseFrequency_;
        }
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public Builder setReleaseFrequency(double value) {
          bitField0_ |= 0x00000008;
          releaseFrequency_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public Builder clearReleaseFrequency() {
          bitField0_ = (bitField0_ & ~0x00000008);
          releaseFrequency_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.TactileInfo)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.TactileInfo)
      private static final pro.beam.interactive.net.packet.Protocol.Report.TactileInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.TactileInfo();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TactileInfo>
          PARSER = new com.google.protobuf.AbstractParser<TactileInfo>() {
        public TactileInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new TactileInfo(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<TactileInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TactileInfo> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ScreenCoordsInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.ScreenCoordsInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>required uint32 id = 1;</code>
       */
      int getId();

      /**
       * <code>optional double coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      boolean hasCoordMean();
      /**
       * <code>optional double coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      double getCoordMean();

      /**
       * <code>optional double coordStdev = 3;</code>
       */
      boolean hasCoordStdev();
      /**
       * <code>optional double coordStdev = 3;</code>
       */
      double getCoordStdev();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.ScreenCoordsInfo}
     *
     * <pre>
     * Reports for the ScreenCoords input type.
     * </pre>
     */
    public  static final class ScreenCoordsInfo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.ScreenCoordsInfo)
        ScreenCoordsInfoOrBuilder {
      // Use ScreenCoordsInfo.newBuilder() to construct.
      private ScreenCoordsInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private ScreenCoordsInfo() {
        id_ = 0;
        coordMean_ = 0D;
        coordStdev_ = 0D;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ScreenCoordsInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                coordMean_ = input.readDouble();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                coordStdev_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.class, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      public static final int COORDMEAN_FIELD_NUMBER = 2;
      private double coordMean_;
      /**
       * <code>optional double coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      public boolean hasCoordMean() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double coordMean = 2;</code>
       *
       * <pre>
       * Cordinates analysis, if requested.
       * </pre>
       */
      public double getCoordMean() {
        return coordMean_;
      }

      public static final int COORDSTDEV_FIELD_NUMBER = 3;
      private double coordStdev_;
      /**
       * <code>optional double coordStdev = 3;</code>
       */
      public boolean hasCoordStdev() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double coordStdev = 3;</code>
       */
      public double getCoordStdev() {
        return coordStdev_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, coordMean_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, coordStdev_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, coordMean_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, coordStdev_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.ScreenCoordsInfo}
       *
       * <pre>
       * Reports for the ScreenCoords input type.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.ScreenCoordsInfo)
          pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.class, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          coordMean_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000002);
          coordStdev_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo build() {
          pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo result = new pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.coordMean_ = coordMean_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.coordStdev_ = coordStdev_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasCoordMean()) {
            setCoordMean(other.getCoordMean());
          }
          if (other.hasCoordStdev()) {
            setCoordStdev(other.getCoordStdev());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasId()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int id_ ;
        /**
         * <code>required uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        private double coordMean_ ;
        /**
         * <code>optional double coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public boolean hasCoordMean() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public double getCoordMean() {
          return coordMean_;
        }
        /**
         * <code>optional double coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public Builder setCoordMean(double value) {
          bitField0_ |= 0x00000002;
          coordMean_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double coordMean = 2;</code>
         *
         * <pre>
         * Cordinates analysis, if requested.
         * </pre>
         */
        public Builder clearCoordMean() {
          bitField0_ = (bitField0_ & ~0x00000002);
          coordMean_ = 0D;
          onChanged();
          return this;
        }

        private double coordStdev_ ;
        /**
         * <code>optional double coordStdev = 3;</code>
         */
        public boolean hasCoordStdev() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double coordStdev = 3;</code>
         */
        public double getCoordStdev() {
          return coordStdev_;
        }
        /**
         * <code>optional double coordStdev = 3;</code>
         */
        public Builder setCoordStdev(double value) {
          bitField0_ |= 0x00000004;
          coordStdev_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double coordStdev = 3;</code>
         */
        public Builder clearCoordStdev() {
          bitField0_ = (bitField0_ & ~0x00000004);
          coordStdev_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.ScreenCoordsInfo)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.ScreenCoordsInfo)
      private static final pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ScreenCoordsInfo>
          PARSER = new com.google.protobuf.AbstractParser<ScreenCoordsInfo>() {
        public ScreenCoordsInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new ScreenCoordsInfo(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<ScreenCoordsInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ScreenCoordsInfo> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ScreenPressInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.ScreenPressInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>required uint32 id = 1;</code>
       */
      int getId();

      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      boolean hasHolding();
      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      double getHolding();

      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      boolean hasPressFrequency();
      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      double getPressFrequency();

      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      boolean hasReleaseFrequency();
      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      double getReleaseFrequency();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.ScreenPressInfo}
     *
     * <pre>
     * Reports for the ScreenCoords input type.
     * </pre>
     */
    public  static final class ScreenPressInfo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.ScreenPressInfo)
        ScreenPressInfoOrBuilder {
      // Use ScreenPressInfo.newBuilder() to construct.
      private ScreenPressInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private ScreenPressInfo() {
        id_ = 0;
        holding_ = 0D;
        pressFrequency_ = 0D;
        releaseFrequency_ = 0D;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ScreenPressInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                holding_ = input.readDouble();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                pressFrequency_ = input.readDouble();
                break;
              }
              case 33: {
                bitField0_ |= 0x00000008;
                releaseFrequency_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenPressInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenPressInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.class, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }

      public static final int HOLDING_FIELD_NUMBER = 2;
      private double holding_;
      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      public boolean hasHolding() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double holding = 2;</code>
       *
       * <pre>
       * analysis on how many users are holding and pressing releasing
       * the buttons, if requested.
       * </pre>
       */
      public double getHolding() {
        return holding_;
      }

      public static final int PRESSFREQUENCY_FIELD_NUMBER = 3;
      private double pressFrequency_;
      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      public boolean hasPressFrequency() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double pressFrequency = 3;</code>
       */
      public double getPressFrequency() {
        return pressFrequency_;
      }

      public static final int RELEASEFREQUENCY_FIELD_NUMBER = 4;
      private double releaseFrequency_;
      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      public boolean hasReleaseFrequency() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double releaseFrequency = 4;</code>
       */
      public double getReleaseFrequency() {
        return releaseFrequency_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, holding_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, pressFrequency_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeDouble(4, releaseFrequency_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, holding_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, pressFrequency_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, releaseFrequency_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.ScreenPressInfo}
       *
       * <pre>
       * Reports for the ScreenCoords input type.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.ScreenPressInfo)
          pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenPressInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenPressInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.class, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          holding_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000002);
          pressFrequency_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          releaseFrequency_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_ScreenPressInfo_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo build() {
          pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo result = new pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.holding_ = holding_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.pressFrequency_ = pressFrequency_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.releaseFrequency_ = releaseFrequency_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasHolding()) {
            setHolding(other.getHolding());
          }
          if (other.hasPressFrequency()) {
            setPressFrequency(other.getPressFrequency());
          }
          if (other.hasReleaseFrequency()) {
            setReleaseFrequency(other.getReleaseFrequency());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasId()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int id_ ;
        /**
         * <code>required uint32 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        private double holding_ ;
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public boolean hasHolding() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public double getHolding() {
          return holding_;
        }
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public Builder setHolding(double value) {
          bitField0_ |= 0x00000002;
          holding_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double holding = 2;</code>
         *
         * <pre>
         * analysis on how many users are holding and pressing releasing
         * the buttons, if requested.
         * </pre>
         */
        public Builder clearHolding() {
          bitField0_ = (bitField0_ & ~0x00000002);
          holding_ = 0D;
          onChanged();
          return this;
        }

        private double pressFrequency_ ;
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public boolean hasPressFrequency() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public double getPressFrequency() {
          return pressFrequency_;
        }
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public Builder setPressFrequency(double value) {
          bitField0_ |= 0x00000004;
          pressFrequency_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double pressFrequency = 3;</code>
         */
        public Builder clearPressFrequency() {
          bitField0_ = (bitField0_ & ~0x00000004);
          pressFrequency_ = 0D;
          onChanged();
          return this;
        }

        private double releaseFrequency_ ;
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public boolean hasReleaseFrequency() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public double getReleaseFrequency() {
          return releaseFrequency_;
        }
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public Builder setReleaseFrequency(double value) {
          bitField0_ |= 0x00000008;
          releaseFrequency_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double releaseFrequency = 4;</code>
         */
        public Builder clearReleaseFrequency() {
          bitField0_ = (bitField0_ & ~0x00000008);
          releaseFrequency_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.ScreenPressInfo)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.ScreenPressInfo)
      private static final pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<ScreenPressInfo>
          PARSER = new com.google.protobuf.AbstractParser<ScreenPressInfo>() {
        public ScreenPressInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new ScreenPressInfo(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<ScreenPressInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ScreenPressInfo> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TIME_FIELD_NUMBER = 1;
    private int time_;
    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     * Unix seconds timestamp in milliseconds that this report was sent at.
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 time = 1;</code>
     *
     * <pre>
     * Unix seconds timestamp in milliseconds that this report was sent at.
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    public static final int USERS_FIELD_NUMBER = 2;
    private pro.beam.interactive.net.packet.Protocol.Report.Users users_;
    /**
     * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
     */
    public boolean hasUsers() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.Users getUsers() {
      return users_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Users.getDefaultInstance() : users_;
    }
    /**
     * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.UsersOrBuilder getUsersOrBuilder() {
      return users_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Users.getDefaultInstance() : users_;
    }

    public static final int JOYSTICK_FIELD_NUMBER = 3;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> joystick_;
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> getJoystickList() {
      return joystick_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
        getJoystickOrBuilderList() {
      return joystick_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    public int getJoystickCount() {
      return joystick_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getJoystick(int index) {
      return joystick_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder getJoystickOrBuilder(
        int index) {
      return joystick_.get(index);
    }

    public static final int TACTILE_FIELD_NUMBER = 4;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> tactile_;
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> getTactileList() {
      return tactile_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
        getTactileOrBuilderList() {
      return tactile_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    public int getTactileCount() {
      return tactile_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getTactile(int index) {
      return tactile_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder getTactileOrBuilder(
        int index) {
      return tactile_.get(index);
    }

    public static final int SCREENCOORDS_FIELD_NUMBER = 5;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo> screenCoords_;
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo> getScreenCoordsList() {
      return screenCoords_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder> 
        getScreenCoordsOrBuilderList() {
      return screenCoords_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    public int getScreenCoordsCount() {
      return screenCoords_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo getScreenCoords(int index) {
      return screenCoords_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder getScreenCoordsOrBuilder(
        int index) {
      return screenCoords_.get(index);
    }

    public static final int SCREENPRESS_FIELD_NUMBER = 6;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo> screenPress_;
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo> getScreenPressList() {
      return screenPress_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder> 
        getScreenPressOrBuilderList() {
      return screenPress_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    public int getScreenPressCount() {
      return screenPress_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo getScreenPress(int index) {
      return screenPress_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder getScreenPressOrBuilder(
        int index) {
      return screenPress_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUsers()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getUsers().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getJoystickCount(); i++) {
        if (!getJoystick(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTactileCount(); i++) {
        if (!getTactile(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getScreenCoordsCount(); i++) {
        if (!getScreenCoords(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getScreenPressCount(); i++) {
        if (!getScreenPress(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getUsers());
      }
      for (int i = 0; i < joystick_.size(); i++) {
        output.writeMessage(3, joystick_.get(i));
      }
      for (int i = 0; i < tactile_.size(); i++) {
        output.writeMessage(4, tactile_.get(i));
      }
      for (int i = 0; i < screenCoords_.size(); i++) {
        output.writeMessage(5, screenCoords_.get(i));
      }
      for (int i = 0; i < screenPress_.size(); i++) {
        output.writeMessage(6, screenPress_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getUsers());
      }
      for (int i = 0; i < joystick_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, joystick_.get(i));
      }
      for (int i = 0; i < tactile_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, tactile_.get(i));
      }
      for (int i = 0; i < screenCoords_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, screenCoords_.get(i));
      }
      for (int i = 0; i < screenPress_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, screenPress_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report}
     *
     * <pre>
     * The Report is send down to the streamer's computer at the
     * reportFrequency, containing information about connected
     * clients and their actions.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report)
        pro.beam.interactive.net.packet.Protocol.ReportOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.class, pro.beam.interactive.net.packet.Protocol.Report.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.Report.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUsersFieldBuilder();
          getJoystickFieldBuilder();
          getTactileFieldBuilder();
          getScreenCoordsFieldBuilder();
          getScreenPressFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (usersBuilder_ == null) {
          users_ = null;
        } else {
          usersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (joystickBuilder_ == null) {
          joystick_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          joystickBuilder_.clear();
        }
        if (tactileBuilder_ == null) {
          tactile_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          tactileBuilder_.clear();
        }
        if (screenCoordsBuilder_ == null) {
          screenCoords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          screenCoordsBuilder_.clear();
        }
        if (screenPressBuilder_ == null) {
          screenPress_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          screenPressBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.Report getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.Report.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.Report build() {
        pro.beam.interactive.net.packet.Protocol.Report result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.Report buildPartial() {
        pro.beam.interactive.net.packet.Protocol.Report result = new pro.beam.interactive.net.packet.Protocol.Report(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (usersBuilder_ == null) {
          result.users_ = users_;
        } else {
          result.users_ = usersBuilder_.build();
        }
        if (joystickBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            joystick_ = java.util.Collections.unmodifiableList(joystick_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.joystick_ = joystick_;
        } else {
          result.joystick_ = joystickBuilder_.build();
        }
        if (tactileBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            tactile_ = java.util.Collections.unmodifiableList(tactile_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.tactile_ = tactile_;
        } else {
          result.tactile_ = tactileBuilder_.build();
        }
        if (screenCoordsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            screenCoords_ = java.util.Collections.unmodifiableList(screenCoords_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.screenCoords_ = screenCoords_;
        } else {
          result.screenCoords_ = screenCoordsBuilder_.build();
        }
        if (screenPressBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            screenPress_ = java.util.Collections.unmodifiableList(screenPress_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.screenPress_ = screenPress_;
        } else {
          result.screenPress_ = screenPressBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.Report) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report other) {
        if (other == pro.beam.interactive.net.packet.Protocol.Report.getDefaultInstance()) return this;
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasUsers()) {
          mergeUsers(other.getUsers());
        }
        if (joystickBuilder_ == null) {
          if (!other.joystick_.isEmpty()) {
            if (joystick_.isEmpty()) {
              joystick_ = other.joystick_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureJoystickIsMutable();
              joystick_.addAll(other.joystick_);
            }
            onChanged();
          }
        } else {
          if (!other.joystick_.isEmpty()) {
            if (joystickBuilder_.isEmpty()) {
              joystickBuilder_.dispose();
              joystickBuilder_ = null;
              joystick_ = other.joystick_;
              bitField0_ = (bitField0_ & ~0x00000004);
              joystickBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getJoystickFieldBuilder() : null;
            } else {
              joystickBuilder_.addAllMessages(other.joystick_);
            }
          }
        }
        if (tactileBuilder_ == null) {
          if (!other.tactile_.isEmpty()) {
            if (tactile_.isEmpty()) {
              tactile_ = other.tactile_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureTactileIsMutable();
              tactile_.addAll(other.tactile_);
            }
            onChanged();
          }
        } else {
          if (!other.tactile_.isEmpty()) {
            if (tactileBuilder_.isEmpty()) {
              tactileBuilder_.dispose();
              tactileBuilder_ = null;
              tactile_ = other.tactile_;
              bitField0_ = (bitField0_ & ~0x00000008);
              tactileBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTactileFieldBuilder() : null;
            } else {
              tactileBuilder_.addAllMessages(other.tactile_);
            }
          }
        }
        if (screenCoordsBuilder_ == null) {
          if (!other.screenCoords_.isEmpty()) {
            if (screenCoords_.isEmpty()) {
              screenCoords_ = other.screenCoords_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureScreenCoordsIsMutable();
              screenCoords_.addAll(other.screenCoords_);
            }
            onChanged();
          }
        } else {
          if (!other.screenCoords_.isEmpty()) {
            if (screenCoordsBuilder_.isEmpty()) {
              screenCoordsBuilder_.dispose();
              screenCoordsBuilder_ = null;
              screenCoords_ = other.screenCoords_;
              bitField0_ = (bitField0_ & ~0x00000010);
              screenCoordsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScreenCoordsFieldBuilder() : null;
            } else {
              screenCoordsBuilder_.addAllMessages(other.screenCoords_);
            }
          }
        }
        if (screenPressBuilder_ == null) {
          if (!other.screenPress_.isEmpty()) {
            if (screenPress_.isEmpty()) {
              screenPress_ = other.screenPress_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureScreenPressIsMutable();
              screenPress_.addAll(other.screenPress_);
            }
            onChanged();
          }
        } else {
          if (!other.screenPress_.isEmpty()) {
            if (screenPressBuilder_.isEmpty()) {
              screenPressBuilder_.dispose();
              screenPressBuilder_ = null;
              screenPress_ = other.screenPress_;
              bitField0_ = (bitField0_ & ~0x00000020);
              screenPressBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getScreenPressFieldBuilder() : null;
            } else {
              screenPressBuilder_.addAllMessages(other.screenPress_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTime()) {
          return false;
        }
        if (!hasUsers()) {
          return false;
        }
        if (!getUsers().isInitialized()) {
          return false;
        }
        for (int i = 0; i < getJoystickCount(); i++) {
          if (!getJoystick(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTactileCount(); i++) {
          if (!getTactile(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getScreenCoordsCount(); i++) {
          if (!getScreenCoords(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getScreenPressCount(); i++) {
          if (!getScreenPress(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.Report parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int time_ ;
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       * Unix seconds timestamp in milliseconds that this report was sent at.
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       * Unix seconds timestamp in milliseconds that this report was sent at.
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       * Unix seconds timestamp in milliseconds that this report was sent at.
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000001;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 time = 1;</code>
       *
       * <pre>
       * Unix seconds timestamp in milliseconds that this report was sent at.
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0;
        onChanged();
        return this;
      }

      private pro.beam.interactive.net.packet.Protocol.Report.Users users_ = null;
      private com.google.protobuf.SingleFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.Users, pro.beam.interactive.net.packet.Protocol.Report.Users.Builder, pro.beam.interactive.net.packet.Protocol.Report.UsersOrBuilder> usersBuilder_;
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public boolean hasUsers() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.Users getUsers() {
        if (usersBuilder_ == null) {
          return users_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Users.getDefaultInstance() : users_;
        } else {
          return usersBuilder_.getMessage();
        }
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public Builder setUsers(pro.beam.interactive.net.packet.Protocol.Report.Users value) {
        if (usersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          users_ = value;
          onChanged();
        } else {
          usersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public Builder setUsers(
          pro.beam.interactive.net.packet.Protocol.Report.Users.Builder builderForValue) {
        if (usersBuilder_ == null) {
          users_ = builderForValue.build();
          onChanged();
        } else {
          usersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public Builder mergeUsers(pro.beam.interactive.net.packet.Protocol.Report.Users value) {
        if (usersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              users_ != null &&
              users_ != pro.beam.interactive.net.packet.Protocol.Report.Users.getDefaultInstance()) {
            users_ =
              pro.beam.interactive.net.packet.Protocol.Report.Users.newBuilder(users_).mergeFrom(value).buildPartial();
          } else {
            users_ = value;
          }
          onChanged();
        } else {
          usersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public Builder clearUsers() {
        if (usersBuilder_ == null) {
          users_ = null;
          onChanged();
        } else {
          usersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.Users.Builder getUsersBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getUsersFieldBuilder().getBuilder();
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.UsersOrBuilder getUsersOrBuilder() {
        if (usersBuilder_ != null) {
          return usersBuilder_.getMessageOrBuilder();
        } else {
          return users_ == null ?
              pro.beam.interactive.net.packet.Protocol.Report.Users.getDefaultInstance() : users_;
        }
      }
      /**
       * <code>required .pro.beam.interactive.Report.Users users = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.Users, pro.beam.interactive.net.packet.Protocol.Report.Users.Builder, pro.beam.interactive.net.packet.Protocol.Report.UsersOrBuilder> 
          getUsersFieldBuilder() {
        if (usersBuilder_ == null) {
          usersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.Report.Users, pro.beam.interactive.net.packet.Protocol.Report.Users.Builder, pro.beam.interactive.net.packet.Protocol.Report.UsersOrBuilder>(
                  getUsers(),
                  getParentForChildren(),
                  isClean());
          users_ = null;
        }
        return usersBuilder_;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> joystick_ =
        java.util.Collections.emptyList();
      private void ensureJoystickIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          joystick_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo>(joystick_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> joystickBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> getJoystickList() {
        if (joystickBuilder_ == null) {
          return java.util.Collections.unmodifiableList(joystick_);
        } else {
          return joystickBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public int getJoystickCount() {
        if (joystickBuilder_ == null) {
          return joystick_.size();
        } else {
          return joystickBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getJoystick(int index) {
        if (joystickBuilder_ == null) {
          return joystick_.get(index);
        } else {
          return joystickBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder setJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.set(index, value);
          onChanged();
        } else {
          joystickBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder setJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.set(index, builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder addJoystick(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.add(value);
          onChanged();
        } else {
          joystickBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder addJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.add(index, value);
          onChanged();
        } else {
          joystickBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder addJoystick(
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.add(builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder addJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.add(index, builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder addAllJoystick(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> values) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, joystick_);
          onChanged();
        } else {
          joystickBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder clearJoystick() {
        if (joystickBuilder_ == null) {
          joystick_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          joystickBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public Builder removeJoystick(int index) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.remove(index);
          onChanged();
        } else {
          joystickBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder getJoystickBuilder(
          int index) {
        return getJoystickFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder getJoystickOrBuilder(
          int index) {
        if (joystickBuilder_ == null) {
          return joystick_.get(index);  } else {
          return joystickBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
           getJoystickOrBuilderList() {
        if (joystickBuilder_ != null) {
          return joystickBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(joystick_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder addJoystickBuilder() {
        return getJoystickFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder addJoystickBuilder(
          int index) {
        return getJoystickFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 3;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder> 
           getJoystickBuilderList() {
        return getJoystickFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
          getJoystickFieldBuilder() {
        if (joystickBuilder_ == null) {
          joystickBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder>(
                  joystick_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          joystick_ = null;
        }
        return joystickBuilder_;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> tactile_ =
        java.util.Collections.emptyList();
      private void ensureTactileIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          tactile_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo>(tactile_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> tactileBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> getTactileList() {
        if (tactileBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tactile_);
        } else {
          return tactileBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public int getTactileCount() {
        if (tactileBuilder_ == null) {
          return tactile_.size();
        } else {
          return tactileBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getTactile(int index) {
        if (tactileBuilder_ == null) {
          return tactile_.get(index);
        } else {
          return tactileBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder setTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.set(index, value);
          onChanged();
        } else {
          tactileBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder setTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.set(index, builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder addTactile(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.add(value);
          onChanged();
        } else {
          tactileBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder addTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.add(index, value);
          onChanged();
        } else {
          tactileBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder addTactile(
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.add(builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder addTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.add(index, builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder addAllTactile(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> values) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tactile_);
          onChanged();
        } else {
          tactileBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder clearTactile() {
        if (tactileBuilder_ == null) {
          tactile_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          tactileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public Builder removeTactile(int index) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.remove(index);
          onChanged();
        } else {
          tactileBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder getTactileBuilder(
          int index) {
        return getTactileFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder getTactileOrBuilder(
          int index) {
        if (tactileBuilder_ == null) {
          return tactile_.get(index);  } else {
          return tactileBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
           getTactileOrBuilderList() {
        if (tactileBuilder_ != null) {
          return tactileBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tactile_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder addTactileBuilder() {
        return getTactileFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder addTactileBuilder(
          int index) {
        return getTactileFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 4;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder> 
           getTactileBuilderList() {
        return getTactileFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
          getTactileFieldBuilder() {
        if (tactileBuilder_ == null) {
          tactileBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.Report.TactileInfo, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder>(
                  tactile_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          tactile_ = null;
        }
        return tactileBuilder_;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo> screenCoords_ =
        java.util.Collections.emptyList();
      private void ensureScreenCoordsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          screenCoords_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo>(screenCoords_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder> screenCoordsBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo> getScreenCoordsList() {
        if (screenCoordsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(screenCoords_);
        } else {
          return screenCoordsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public int getScreenCoordsCount() {
        if (screenCoordsBuilder_ == null) {
          return screenCoords_.size();
        } else {
          return screenCoordsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo getScreenCoords(int index) {
        if (screenCoordsBuilder_ == null) {
          return screenCoords_.get(index);
        } else {
          return screenCoordsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder setScreenCoords(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo value) {
        if (screenCoordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScreenCoordsIsMutable();
          screenCoords_.set(index, value);
          onChanged();
        } else {
          screenCoordsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder setScreenCoords(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder builderForValue) {
        if (screenCoordsBuilder_ == null) {
          ensureScreenCoordsIsMutable();
          screenCoords_.set(index, builderForValue.build());
          onChanged();
        } else {
          screenCoordsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder addScreenCoords(pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo value) {
        if (screenCoordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScreenCoordsIsMutable();
          screenCoords_.add(value);
          onChanged();
        } else {
          screenCoordsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder addScreenCoords(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo value) {
        if (screenCoordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScreenCoordsIsMutable();
          screenCoords_.add(index, value);
          onChanged();
        } else {
          screenCoordsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder addScreenCoords(
          pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder builderForValue) {
        if (screenCoordsBuilder_ == null) {
          ensureScreenCoordsIsMutable();
          screenCoords_.add(builderForValue.build());
          onChanged();
        } else {
          screenCoordsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder addScreenCoords(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder builderForValue) {
        if (screenCoordsBuilder_ == null) {
          ensureScreenCoordsIsMutable();
          screenCoords_.add(index, builderForValue.build());
          onChanged();
        } else {
          screenCoordsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder addAllScreenCoords(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo> values) {
        if (screenCoordsBuilder_ == null) {
          ensureScreenCoordsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, screenCoords_);
          onChanged();
        } else {
          screenCoordsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder clearScreenCoords() {
        if (screenCoordsBuilder_ == null) {
          screenCoords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          screenCoordsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public Builder removeScreenCoords(int index) {
        if (screenCoordsBuilder_ == null) {
          ensureScreenCoordsIsMutable();
          screenCoords_.remove(index);
          onChanged();
        } else {
          screenCoordsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder getScreenCoordsBuilder(
          int index) {
        return getScreenCoordsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder getScreenCoordsOrBuilder(
          int index) {
        if (screenCoordsBuilder_ == null) {
          return screenCoords_.get(index);  } else {
          return screenCoordsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder> 
           getScreenCoordsOrBuilderList() {
        if (screenCoordsBuilder_ != null) {
          return screenCoordsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(screenCoords_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder addScreenCoordsBuilder() {
        return getScreenCoordsFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder addScreenCoordsBuilder(
          int index) {
        return getScreenCoordsFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenCoordsInfo screenCoords = 5;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder> 
           getScreenCoordsBuilderList() {
        return getScreenCoordsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder> 
          getScreenCoordsFieldBuilder() {
        if (screenCoordsBuilder_ == null) {
          screenCoordsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.ScreenCoordsInfoOrBuilder>(
                  screenCoords_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          screenCoords_ = null;
        }
        return screenCoordsBuilder_;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo> screenPress_ =
        java.util.Collections.emptyList();
      private void ensureScreenPressIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          screenPress_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo>(screenPress_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder> screenPressBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo> getScreenPressList() {
        if (screenPressBuilder_ == null) {
          return java.util.Collections.unmodifiableList(screenPress_);
        } else {
          return screenPressBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public int getScreenPressCount() {
        if (screenPressBuilder_ == null) {
          return screenPress_.size();
        } else {
          return screenPressBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo getScreenPress(int index) {
        if (screenPressBuilder_ == null) {
          return screenPress_.get(index);
        } else {
          return screenPressBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder setScreenPress(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo value) {
        if (screenPressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScreenPressIsMutable();
          screenPress_.set(index, value);
          onChanged();
        } else {
          screenPressBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder setScreenPress(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder builderForValue) {
        if (screenPressBuilder_ == null) {
          ensureScreenPressIsMutable();
          screenPress_.set(index, builderForValue.build());
          onChanged();
        } else {
          screenPressBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder addScreenPress(pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo value) {
        if (screenPressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScreenPressIsMutable();
          screenPress_.add(value);
          onChanged();
        } else {
          screenPressBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder addScreenPress(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo value) {
        if (screenPressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScreenPressIsMutable();
          screenPress_.add(index, value);
          onChanged();
        } else {
          screenPressBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder addScreenPress(
          pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder builderForValue) {
        if (screenPressBuilder_ == null) {
          ensureScreenPressIsMutable();
          screenPress_.add(builderForValue.build());
          onChanged();
        } else {
          screenPressBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder addScreenPress(
          int index, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder builderForValue) {
        if (screenPressBuilder_ == null) {
          ensureScreenPressIsMutable();
          screenPress_.add(index, builderForValue.build());
          onChanged();
        } else {
          screenPressBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder addAllScreenPress(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo> values) {
        if (screenPressBuilder_ == null) {
          ensureScreenPressIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, screenPress_);
          onChanged();
        } else {
          screenPressBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder clearScreenPress() {
        if (screenPressBuilder_ == null) {
          screenPress_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          screenPressBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public Builder removeScreenPress(int index) {
        if (screenPressBuilder_ == null) {
          ensureScreenPressIsMutable();
          screenPress_.remove(index);
          onChanged();
        } else {
          screenPressBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder getScreenPressBuilder(
          int index) {
        return getScreenPressFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder getScreenPressOrBuilder(
          int index) {
        if (screenPressBuilder_ == null) {
          return screenPress_.get(index);  } else {
          return screenPressBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder> 
           getScreenPressOrBuilderList() {
        if (screenPressBuilder_ != null) {
          return screenPressBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(screenPress_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder addScreenPressBuilder() {
        return getScreenPressFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder addScreenPressBuilder(
          int index) {
        return getScreenPressFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.ScreenPressInfo screenPress = 6;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder> 
           getScreenPressBuilderList() {
        return getScreenPressFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder> 
          getScreenPressFieldBuilder() {
        if (screenPressBuilder_ == null) {
          screenPressBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.ScreenPressInfoOrBuilder>(
                  screenPress_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          screenPress_ = null;
        }
        return screenPressBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report)
    private static final pro.beam.interactive.net.packet.Protocol.Report DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report();
    }

    public static pro.beam.interactive.net.packet.Protocol.Report getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Report>
        PARSER = new com.google.protobuf.AbstractParser<Report>() {
      public Report parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Report(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Report> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Report> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.Report getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Error)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string message = 1;</code>
     */
    boolean hasMessage();
    /**
     * <code>required string message = 1;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>required string message = 1;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code pro.beam.interactive.Error}
   *
   * <pre>
   * An error in response to some invalid input or event.
   * </pre>
   */
  public  static final class Error extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.Error)
      ErrorOrBuilder {
    // Use Error.newBuilder() to construct.
    private Error(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Error() {
      message_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Error(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              message_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.Error.class, pro.beam.interactive.net.packet.Protocol.Error.Builder.class);
    }

    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private volatile java.lang.Object message_;
    /**
     * <code>required string message = 1;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string message = 1;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string message = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, message_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, message_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Error prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Error}
     *
     * <pre>
     * An error in response to some invalid input or event.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Error)
        pro.beam.interactive.net.packet.Protocol.ErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Error.class, pro.beam.interactive.net.packet.Protocol.Error.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.Error.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.Error getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.Error.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.Error build() {
        pro.beam.interactive.net.packet.Protocol.Error result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.Error buildPartial() {
        pro.beam.interactive.net.packet.Protocol.Error result = new pro.beam.interactive.net.packet.Protocol.Error(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.Error) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.Error)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Error other) {
        if (other == pro.beam.interactive.net.packet.Protocol.Error.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          bitField0_ |= 0x00000001;
          message_ = other.message_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.Error parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.Error) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object message_ = "";
      /**
       * <code>required string message = 1;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string message = 1;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            message_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string message = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string message = 1;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 1;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 1;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Error)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.Error)
    private static final pro.beam.interactive.net.packet.Protocol.Error DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Error();
    }

    public static pro.beam.interactive.net.packet.Protocol.Error getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Error>
        PARSER = new com.google.protobuf.AbstractParser<Error>() {
      public Error parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Error(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Error> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Error> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.Error getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProgressUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.ProgressUpdate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string state = 3;</code>
     *
     * <pre>
     * State to change to. States with the given state in their `states` array
     * will be visible. If not passed, the state will not be changed.
     * The default state at initialization of the robot is simply "default".
     * </pre>
     */
    boolean hasState();
    /**
     * <code>optional string state = 3;</code>
     *
     * <pre>
     * State to change to. States with the given state in their `states` array
     * will be visible. If not passed, the state will not be changed.
     * The default state at initialization of the robot is simply "default".
     * </pre>
     */
    java.lang.String getState();
    /**
     * <code>optional string state = 3;</code>
     *
     * <pre>
     * State to change to. States with the given state in their `states` array
     * will be visible. If not passed, the state will not be changed.
     * The default state at initialization of the robot is simply "default".
     * </pre>
     */
    com.google.protobuf.ByteString
        getStateBytes();

    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate> 
        getJoystickList();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate getJoystick(int index);
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    int getJoystickCount();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder> 
        getJoystickOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder getJoystickOrBuilder(
        int index);

    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate> 
        getTactileList();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate getTactile(int index);
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    int getTactileCount();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder> 
        getTactileOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder getTactileOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pro.beam.interactive.ProgressUpdate}
   *
   * <pre>
   * A ProgressUpdate message may be sent up periodically from
   * the Robot. It contains an array of objects to update the
   * multiple controls on the frontend.
   * </pre>
   */
  public  static final class ProgressUpdate extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.ProgressUpdate)
      ProgressUpdateOrBuilder {
    // Use ProgressUpdate.newBuilder() to construct.
    private ProgressUpdate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ProgressUpdate() {
      state_ = "";
      joystick_ = java.util.Collections.emptyList();
      tactile_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProgressUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                joystick_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate>();
                mutable_bitField0_ |= 0x00000002;
              }
              joystick_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                tactile_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate>();
                mutable_bitField0_ |= 0x00000004;
              }
              tactile_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.parser(), extensionRegistry));
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              state_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          joystick_ = java.util.Collections.unmodifiableList(joystick_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          tactile_ = java.util.Collections.unmodifiableList(tactile_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.ProgressUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Builder.class);
    }

    public interface JoystickUpdateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.ProgressUpdate.JoystickUpdate)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the joystick control to update
       * </pre>
       */
      boolean hasId();
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the joystick control to update
       * </pre>
       */
      int getId();

      /**
       * <code>optional double angle = 2;</code>
       *
       * <pre>
       * The angle to move the "pointer" that appears around the joystick
       * to. This is usually used to indicate the average direction that
       * users pointing to. This is given in radians, in the range
       * [0, 2π), with the same alignment as the standard unit circle.
       * </pre>
       */
      boolean hasAngle();
      /**
       * <code>optional double angle = 2;</code>
       *
       * <pre>
       * The angle to move the "pointer" that appears around the joystick
       * to. This is usually used to indicate the average direction that
       * users pointing to. This is given in radians, in the range
       * [0, 2π), with the same alignment as the standard unit circle.
       * </pre>
       */
      double getAngle();

      /**
       * <code>optional double intensity = 3;</code>
       *
       * <pre>
       * Intensity the pointer should appear at. This is often used to
       * indicate how strongly users are moving in a direction.
       * Should be given in the range [0, 1].
       * </pre>
       */
      boolean hasIntensity();
      /**
       * <code>optional double intensity = 3;</code>
       *
       * <pre>
       * Intensity the pointer should appear at. This is often used to
       * indicate how strongly users are moving in a direction.
       * Should be given in the range [0, 1].
       * </pre>
       */
      double getIntensity();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.ProgressUpdate.JoystickUpdate}
     */
    public  static final class JoystickUpdate extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.ProgressUpdate.JoystickUpdate)
        JoystickUpdateOrBuilder {
      // Use JoystickUpdate.newBuilder() to construct.
      private JoystickUpdate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private JoystickUpdate() {
        id_ = 0;
        angle_ = 0D;
        intensity_ = 0D;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private JoystickUpdate(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                angle_ = input.readDouble();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                intensity_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the joystick control to update
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the joystick control to update
       * </pre>
       */
      public int getId() {
        return id_;
      }

      public static final int ANGLE_FIELD_NUMBER = 2;
      private double angle_;
      /**
       * <code>optional double angle = 2;</code>
       *
       * <pre>
       * The angle to move the "pointer" that appears around the joystick
       * to. This is usually used to indicate the average direction that
       * users pointing to. This is given in radians, in the range
       * [0, 2π), with the same alignment as the standard unit circle.
       * </pre>
       */
      public boolean hasAngle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double angle = 2;</code>
       *
       * <pre>
       * The angle to move the "pointer" that appears around the joystick
       * to. This is usually used to indicate the average direction that
       * users pointing to. This is given in radians, in the range
       * [0, 2π), with the same alignment as the standard unit circle.
       * </pre>
       */
      public double getAngle() {
        return angle_;
      }

      public static final int INTENSITY_FIELD_NUMBER = 3;
      private double intensity_;
      /**
       * <code>optional double intensity = 3;</code>
       *
       * <pre>
       * Intensity the pointer should appear at. This is often used to
       * indicate how strongly users are moving in a direction.
       * Should be given in the range [0, 1].
       * </pre>
       */
      public boolean hasIntensity() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double intensity = 3;</code>
       *
       * <pre>
       * Intensity the pointer should appear at. This is often used to
       * indicate how strongly users are moving in a direction.
       * Should be given in the range [0, 1].
       * </pre>
       */
      public double getIntensity() {
        return intensity_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, angle_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, intensity_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, angle_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, intensity_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.ProgressUpdate.JoystickUpdate}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.ProgressUpdate.JoystickUpdate)
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          angle_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000002);
          intensity_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate build() {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate buildPartial() {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate result = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.angle_ = angle_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.intensity_ = intensity_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate other) {
          if (other == pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasAngle()) {
            setAngle(other.getAngle());
          }
          if (other.hasIntensity()) {
            setIntensity(other.getIntensity());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasId()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int id_ ;
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the joystick control to update
         * </pre>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the joystick control to update
         * </pre>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the joystick control to update
         * </pre>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the joystick control to update
         * </pre>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        private double angle_ ;
        /**
         * <code>optional double angle = 2;</code>
         *
         * <pre>
         * The angle to move the "pointer" that appears around the joystick
         * to. This is usually used to indicate the average direction that
         * users pointing to. This is given in radians, in the range
         * [0, 2π), with the same alignment as the standard unit circle.
         * </pre>
         */
        public boolean hasAngle() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double angle = 2;</code>
         *
         * <pre>
         * The angle to move the "pointer" that appears around the joystick
         * to. This is usually used to indicate the average direction that
         * users pointing to. This is given in radians, in the range
         * [0, 2π), with the same alignment as the standard unit circle.
         * </pre>
         */
        public double getAngle() {
          return angle_;
        }
        /**
         * <code>optional double angle = 2;</code>
         *
         * <pre>
         * The angle to move the "pointer" that appears around the joystick
         * to. This is usually used to indicate the average direction that
         * users pointing to. This is given in radians, in the range
         * [0, 2π), with the same alignment as the standard unit circle.
         * </pre>
         */
        public Builder setAngle(double value) {
          bitField0_ |= 0x00000002;
          angle_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double angle = 2;</code>
         *
         * <pre>
         * The angle to move the "pointer" that appears around the joystick
         * to. This is usually used to indicate the average direction that
         * users pointing to. This is given in radians, in the range
         * [0, 2π), with the same alignment as the standard unit circle.
         * </pre>
         */
        public Builder clearAngle() {
          bitField0_ = (bitField0_ & ~0x00000002);
          angle_ = 0D;
          onChanged();
          return this;
        }

        private double intensity_ ;
        /**
         * <code>optional double intensity = 3;</code>
         *
         * <pre>
         * Intensity the pointer should appear at. This is often used to
         * indicate how strongly users are moving in a direction.
         * Should be given in the range [0, 1].
         * </pre>
         */
        public boolean hasIntensity() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double intensity = 3;</code>
         *
         * <pre>
         * Intensity the pointer should appear at. This is often used to
         * indicate how strongly users are moving in a direction.
         * Should be given in the range [0, 1].
         * </pre>
         */
        public double getIntensity() {
          return intensity_;
        }
        /**
         * <code>optional double intensity = 3;</code>
         *
         * <pre>
         * Intensity the pointer should appear at. This is often used to
         * indicate how strongly users are moving in a direction.
         * Should be given in the range [0, 1].
         * </pre>
         */
        public Builder setIntensity(double value) {
          bitField0_ |= 0x00000004;
          intensity_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double intensity = 3;</code>
         *
         * <pre>
         * Intensity the pointer should appear at. This is often used to
         * indicate how strongly users are moving in a direction.
         * Should be given in the range [0, 1].
         * </pre>
         */
        public Builder clearIntensity() {
          bitField0_ = (bitField0_ & ~0x00000004);
          intensity_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.ProgressUpdate.JoystickUpdate)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.ProgressUpdate.JoystickUpdate)
      private static final pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate();
      }

      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<JoystickUpdate>
          PARSER = new com.google.protobuf.AbstractParser<JoystickUpdate>() {
        public JoystickUpdate parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new JoystickUpdate(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<JoystickUpdate> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<JoystickUpdate> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TactileUpdateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.ProgressUpdate.TactileUpdate)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the tactile control to update
       * </pre>
       */
      boolean hasId();
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the tactile control to update
       * </pre>
       */
      int getId();

      /**
       * <code>optional uint32 cooldown = 2;</code>
       *
       * <pre>
       * Starts a cooldown for all users, with a duration given in milliseconds.
       * Users will not be able to press the button until the cooldown is
       * over. Users who currently are pressing the button will be marked
       * as having released it. Sending another cooldown before the first
       * is over sets the cooldown's duration. The cooldown duration will
       * decrement automatically.
       * </pre>
       */
      boolean hasCooldown();
      /**
       * <code>optional uint32 cooldown = 2;</code>
       *
       * <pre>
       * Starts a cooldown for all users, with a duration given in milliseconds.
       * Users will not be able to press the button until the cooldown is
       * over. Users who currently are pressing the button will be marked
       * as having released it. Sending another cooldown before the first
       * is over sets the cooldown's duration. The cooldown duration will
       * decrement automatically.
       * </pre>
       */
      int getCooldown();

      /**
       * <code>optional bool fired = 3;</code>
       *
       * <pre>
       * Marks the button has having been fired, showing a "pulse"
       * on the Beam frontend.
       * </pre>
       */
      boolean hasFired();
      /**
       * <code>optional bool fired = 3;</code>
       *
       * <pre>
       * Marks the button has having been fired, showing a "pulse"
       * on the Beam frontend.
       * </pre>
       */
      boolean getFired();

      /**
       * <code>optional double progress = 4;</code>
       *
       * <pre>
       * Sets the progress of the button toward some threshold, appearing
       * as a sort of progress bar on the frontend. Should be given in the
       * range [0, 1].
       * </pre>
       */
      boolean hasProgress();
      /**
       * <code>optional double progress = 4;</code>
       *
       * <pre>
       * Sets the progress of the button toward some threshold, appearing
       * as a sort of progress bar on the frontend. Should be given in the
       * range [0, 1].
       * </pre>
       */
      double getProgress();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.ProgressUpdate.TactileUpdate}
     */
    public  static final class TactileUpdate extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.ProgressUpdate.TactileUpdate)
        TactileUpdateOrBuilder {
      // Use TactileUpdate.newBuilder() to construct.
      private TactileUpdate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TactileUpdate() {
        id_ = 0;
        cooldown_ = 0;
        fired_ = false;
        progress_ = 0D;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TactileUpdate(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                cooldown_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                fired_ = input.readBool();
                break;
              }
              case 33: {
                bitField0_ |= 0x00000008;
                progress_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the tactile control to update
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       *
       * <pre>
       * The ID of the tactile control to update
       * </pre>
       */
      public int getId() {
        return id_;
      }

      public static final int COOLDOWN_FIELD_NUMBER = 2;
      private int cooldown_;
      /**
       * <code>optional uint32 cooldown = 2;</code>
       *
       * <pre>
       * Starts a cooldown for all users, with a duration given in milliseconds.
       * Users will not be able to press the button until the cooldown is
       * over. Users who currently are pressing the button will be marked
       * as having released it. Sending another cooldown before the first
       * is over sets the cooldown's duration. The cooldown duration will
       * decrement automatically.
       * </pre>
       */
      public boolean hasCooldown() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 cooldown = 2;</code>
       *
       * <pre>
       * Starts a cooldown for all users, with a duration given in milliseconds.
       * Users will not be able to press the button until the cooldown is
       * over. Users who currently are pressing the button will be marked
       * as having released it. Sending another cooldown before the first
       * is over sets the cooldown's duration. The cooldown duration will
       * decrement automatically.
       * </pre>
       */
      public int getCooldown() {
        return cooldown_;
      }

      public static final int FIRED_FIELD_NUMBER = 3;
      private boolean fired_;
      /**
       * <code>optional bool fired = 3;</code>
       *
       * <pre>
       * Marks the button has having been fired, showing a "pulse"
       * on the Beam frontend.
       * </pre>
       */
      public boolean hasFired() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool fired = 3;</code>
       *
       * <pre>
       * Marks the button has having been fired, showing a "pulse"
       * on the Beam frontend.
       * </pre>
       */
      public boolean getFired() {
        return fired_;
      }

      public static final int PROGRESS_FIELD_NUMBER = 4;
      private double progress_;
      /**
       * <code>optional double progress = 4;</code>
       *
       * <pre>
       * Sets the progress of the button toward some threshold, appearing
       * as a sort of progress bar on the frontend. Should be given in the
       * range [0, 1].
       * </pre>
       */
      public boolean hasProgress() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double progress = 4;</code>
       *
       * <pre>
       * Sets the progress of the button toward some threshold, appearing
       * as a sort of progress bar on the frontend. Should be given in the
       * range [0, 1].
       * </pre>
       */
      public double getProgress() {
        return progress_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, cooldown_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBool(3, fired_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeDouble(4, progress_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, cooldown_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, fired_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, progress_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.ProgressUpdate.TactileUpdate}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.ProgressUpdate.TactileUpdate)
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          cooldown_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          fired_ = false;
          bitField0_ = (bitField0_ & ~0x00000004);
          progress_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate build() {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate buildPartial() {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate result = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.cooldown_ = cooldown_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.fired_ = fired_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.progress_ = progress_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate other) {
          if (other == pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasCooldown()) {
            setCooldown(other.getCooldown());
          }
          if (other.hasFired()) {
            setFired(other.getFired());
          }
          if (other.hasProgress()) {
            setProgress(other.getProgress());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasId()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int id_ ;
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the tactile control to update
         * </pre>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the tactile control to update
         * </pre>
         */
        public int getId() {
          return id_;
        }
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the tactile control to update
         * </pre>
         */
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 id = 1;</code>
         *
         * <pre>
         * The ID of the tactile control to update
         * </pre>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          onChanged();
          return this;
        }

        private int cooldown_ ;
        /**
         * <code>optional uint32 cooldown = 2;</code>
         *
         * <pre>
         * Starts a cooldown for all users, with a duration given in milliseconds.
         * Users will not be able to press the button until the cooldown is
         * over. Users who currently are pressing the button will be marked
         * as having released it. Sending another cooldown before the first
         * is over sets the cooldown's duration. The cooldown duration will
         * decrement automatically.
         * </pre>
         */
        public boolean hasCooldown() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional uint32 cooldown = 2;</code>
         *
         * <pre>
         * Starts a cooldown for all users, with a duration given in milliseconds.
         * Users will not be able to press the button until the cooldown is
         * over. Users who currently are pressing the button will be marked
         * as having released it. Sending another cooldown before the first
         * is over sets the cooldown's duration. The cooldown duration will
         * decrement automatically.
         * </pre>
         */
        public int getCooldown() {
          return cooldown_;
        }
        /**
         * <code>optional uint32 cooldown = 2;</code>
         *
         * <pre>
         * Starts a cooldown for all users, with a duration given in milliseconds.
         * Users will not be able to press the button until the cooldown is
         * over. Users who currently are pressing the button will be marked
         * as having released it. Sending another cooldown before the first
         * is over sets the cooldown's duration. The cooldown duration will
         * decrement automatically.
         * </pre>
         */
        public Builder setCooldown(int value) {
          bitField0_ |= 0x00000002;
          cooldown_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 cooldown = 2;</code>
         *
         * <pre>
         * Starts a cooldown for all users, with a duration given in milliseconds.
         * Users will not be able to press the button until the cooldown is
         * over. Users who currently are pressing the button will be marked
         * as having released it. Sending another cooldown before the first
         * is over sets the cooldown's duration. The cooldown duration will
         * decrement automatically.
         * </pre>
         */
        public Builder clearCooldown() {
          bitField0_ = (bitField0_ & ~0x00000002);
          cooldown_ = 0;
          onChanged();
          return this;
        }

        private boolean fired_ ;
        /**
         * <code>optional bool fired = 3;</code>
         *
         * <pre>
         * Marks the button has having been fired, showing a "pulse"
         * on the Beam frontend.
         * </pre>
         */
        public boolean hasFired() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional bool fired = 3;</code>
         *
         * <pre>
         * Marks the button has having been fired, showing a "pulse"
         * on the Beam frontend.
         * </pre>
         */
        public boolean getFired() {
          return fired_;
        }
        /**
         * <code>optional bool fired = 3;</code>
         *
         * <pre>
         * Marks the button has having been fired, showing a "pulse"
         * on the Beam frontend.
         * </pre>
         */
        public Builder setFired(boolean value) {
          bitField0_ |= 0x00000004;
          fired_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool fired = 3;</code>
         *
         * <pre>
         * Marks the button has having been fired, showing a "pulse"
         * on the Beam frontend.
         * </pre>
         */
        public Builder clearFired() {
          bitField0_ = (bitField0_ & ~0x00000004);
          fired_ = false;
          onChanged();
          return this;
        }

        private double progress_ ;
        /**
         * <code>optional double progress = 4;</code>
         *
         * <pre>
         * Sets the progress of the button toward some threshold, appearing
         * as a sort of progress bar on the frontend. Should be given in the
         * range [0, 1].
         * </pre>
         */
        public boolean hasProgress() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double progress = 4;</code>
         *
         * <pre>
         * Sets the progress of the button toward some threshold, appearing
         * as a sort of progress bar on the frontend. Should be given in the
         * range [0, 1].
         * </pre>
         */
        public double getProgress() {
          return progress_;
        }
        /**
         * <code>optional double progress = 4;</code>
         *
         * <pre>
         * Sets the progress of the button toward some threshold, appearing
         * as a sort of progress bar on the frontend. Should be given in the
         * range [0, 1].
         * </pre>
         */
        public Builder setProgress(double value) {
          bitField0_ |= 0x00000008;
          progress_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double progress = 4;</code>
         *
         * <pre>
         * Sets the progress of the button toward some threshold, appearing
         * as a sort of progress bar on the frontend. Should be given in the
         * range [0, 1].
         * </pre>
         */
        public Builder clearProgress() {
          bitField0_ = (bitField0_ & ~0x00000008);
          progress_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.ProgressUpdate.TactileUpdate)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.ProgressUpdate.TactileUpdate)
      private static final pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate();
      }

      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TactileUpdate>
          PARSER = new com.google.protobuf.AbstractParser<TactileUpdate>() {
        public TactileUpdate parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new TactileUpdate(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<TactileUpdate> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TactileUpdate> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int STATE_FIELD_NUMBER = 3;
    private volatile java.lang.Object state_;
    /**
     * <code>optional string state = 3;</code>
     *
     * <pre>
     * State to change to. States with the given state in their `states` array
     * will be visible. If not passed, the state will not be changed.
     * The default state at initialization of the robot is simply "default".
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string state = 3;</code>
     *
     * <pre>
     * State to change to. States with the given state in their `states` array
     * will be visible. If not passed, the state will not be changed.
     * The default state at initialization of the robot is simply "default".
     * </pre>
     */
    public java.lang.String getState() {
      java.lang.Object ref = state_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          state_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string state = 3;</code>
     *
     * <pre>
     * State to change to. States with the given state in their `states` array
     * will be visible. If not passed, the state will not be changed.
     * The default state at initialization of the robot is simply "default".
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStateBytes() {
      java.lang.Object ref = state_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        state_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int JOYSTICK_FIELD_NUMBER = 1;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate> joystick_;
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate> getJoystickList() {
      return joystick_;
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder> 
        getJoystickOrBuilderList() {
      return joystick_;
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    public int getJoystickCount() {
      return joystick_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate getJoystick(int index) {
      return joystick_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder getJoystickOrBuilder(
        int index) {
      return joystick_.get(index);
    }

    public static final int TACTILE_FIELD_NUMBER = 2;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate> tactile_;
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate> getTactileList() {
      return tactile_;
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder> 
        getTactileOrBuilderList() {
      return tactile_;
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    public int getTactileCount() {
      return tactile_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate getTactile(int index) {
      return tactile_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder getTactileOrBuilder(
        int index) {
      return tactile_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getJoystickCount(); i++) {
        if (!getJoystick(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTactileCount(); i++) {
        if (!getTactile(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < joystick_.size(); i++) {
        output.writeMessage(1, joystick_.get(i));
      }
      for (int i = 0; i < tactile_.size(); i++) {
        output.writeMessage(2, tactile_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, state_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < joystick_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, joystick_.get(i));
      }
      for (int i = 0; i < tactile_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tactile_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, state_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.ProgressUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.ProgressUpdate}
     *
     * <pre>
     * A ProgressUpdate message may be sent up periodically from
     * the Robot. It contains an array of objects to update the
     * multiple controls on the frontend.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.ProgressUpdate)
        pro.beam.interactive.net.packet.Protocol.ProgressUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.ProgressUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.ProgressUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getJoystickFieldBuilder();
          getTactileFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        state_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (joystickBuilder_ == null) {
          joystick_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          joystickBuilder_.clear();
        }
        if (tactileBuilder_ == null) {
          tactile_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          tactileBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.ProgressUpdate.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate build() {
        pro.beam.interactive.net.packet.Protocol.ProgressUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate buildPartial() {
        pro.beam.interactive.net.packet.Protocol.ProgressUpdate result = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (joystickBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            joystick_ = java.util.Collections.unmodifiableList(joystick_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.joystick_ = joystick_;
        } else {
          result.joystick_ = joystickBuilder_.build();
        }
        if (tactileBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            tactile_ = java.util.Collections.unmodifiableList(tactile_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.tactile_ = tactile_;
        } else {
          result.tactile_ = tactileBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.ProgressUpdate) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.ProgressUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.ProgressUpdate other) {
        if (other == pro.beam.interactive.net.packet.Protocol.ProgressUpdate.getDefaultInstance()) return this;
        if (other.hasState()) {
          bitField0_ |= 0x00000001;
          state_ = other.state_;
          onChanged();
        }
        if (joystickBuilder_ == null) {
          if (!other.joystick_.isEmpty()) {
            if (joystick_.isEmpty()) {
              joystick_ = other.joystick_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureJoystickIsMutable();
              joystick_.addAll(other.joystick_);
            }
            onChanged();
          }
        } else {
          if (!other.joystick_.isEmpty()) {
            if (joystickBuilder_.isEmpty()) {
              joystickBuilder_.dispose();
              joystickBuilder_ = null;
              joystick_ = other.joystick_;
              bitField0_ = (bitField0_ & ~0x00000002);
              joystickBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getJoystickFieldBuilder() : null;
            } else {
              joystickBuilder_.addAllMessages(other.joystick_);
            }
          }
        }
        if (tactileBuilder_ == null) {
          if (!other.tactile_.isEmpty()) {
            if (tactile_.isEmpty()) {
              tactile_ = other.tactile_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTactileIsMutable();
              tactile_.addAll(other.tactile_);
            }
            onChanged();
          }
        } else {
          if (!other.tactile_.isEmpty()) {
            if (tactileBuilder_.isEmpty()) {
              tactileBuilder_.dispose();
              tactileBuilder_ = null;
              tactile_ = other.tactile_;
              bitField0_ = (bitField0_ & ~0x00000004);
              tactileBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTactileFieldBuilder() : null;
            } else {
              tactileBuilder_.addAllMessages(other.tactile_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getJoystickCount(); i++) {
          if (!getJoystick(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTactileCount(); i++) {
          if (!getTactile(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.ProgressUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.ProgressUpdate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object state_ = "";
      /**
       * <code>optional string state = 3;</code>
       *
       * <pre>
       * State to change to. States with the given state in their `states` array
       * will be visible. If not passed, the state will not be changed.
       * The default state at initialization of the robot is simply "default".
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string state = 3;</code>
       *
       * <pre>
       * State to change to. States with the given state in their `states` array
       * will be visible. If not passed, the state will not be changed.
       * The default state at initialization of the robot is simply "default".
       * </pre>
       */
      public java.lang.String getState() {
        java.lang.Object ref = state_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            state_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string state = 3;</code>
       *
       * <pre>
       * State to change to. States with the given state in their `states` array
       * will be visible. If not passed, the state will not be changed.
       * The default state at initialization of the robot is simply "default".
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStateBytes() {
        java.lang.Object ref = state_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          state_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string state = 3;</code>
       *
       * <pre>
       * State to change to. States with the given state in their `states` array
       * will be visible. If not passed, the state will not be changed.
       * The default state at initialization of the robot is simply "default".
       * </pre>
       */
      public Builder setState(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string state = 3;</code>
       *
       * <pre>
       * State to change to. States with the given state in their `states` array
       * will be visible. If not passed, the state will not be changed.
       * The default state at initialization of the robot is simply "default".
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = getDefaultInstance().getState();
        onChanged();
        return this;
      }
      /**
       * <code>optional string state = 3;</code>
       *
       * <pre>
       * State to change to. States with the given state in their `states` array
       * will be visible. If not passed, the state will not be changed.
       * The default state at initialization of the robot is simply "default".
       * </pre>
       */
      public Builder setStateBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate> joystick_ =
        java.util.Collections.emptyList();
      private void ensureJoystickIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          joystick_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate>(joystick_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder> joystickBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate> getJoystickList() {
        if (joystickBuilder_ == null) {
          return java.util.Collections.unmodifiableList(joystick_);
        } else {
          return joystickBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public int getJoystickCount() {
        if (joystickBuilder_ == null) {
          return joystick_.size();
        } else {
          return joystickBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate getJoystick(int index) {
        if (joystickBuilder_ == null) {
          return joystick_.get(index);
        } else {
          return joystickBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder setJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.set(index, value);
          onChanged();
        } else {
          joystickBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder setJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.set(index, builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder addJoystick(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.add(value);
          onChanged();
        } else {
          joystickBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder addJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.add(index, value);
          onChanged();
        } else {
          joystickBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder addJoystick(
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.add(builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder addJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.add(index, builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder addAllJoystick(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate> values) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, joystick_);
          onChanged();
        } else {
          joystickBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder clearJoystick() {
        if (joystickBuilder_ == null) {
          joystick_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          joystickBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public Builder removeJoystick(int index) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.remove(index);
          onChanged();
        } else {
          joystickBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder getJoystickBuilder(
          int index) {
        return getJoystickFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder getJoystickOrBuilder(
          int index) {
        if (joystickBuilder_ == null) {
          return joystick_.get(index);  } else {
          return joystickBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder> 
           getJoystickOrBuilderList() {
        if (joystickBuilder_ != null) {
          return joystickBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(joystick_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder addJoystickBuilder() {
        return getJoystickFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder addJoystickBuilder(
          int index) {
        return getJoystickFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.JoystickUpdate joystick = 1;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder> 
           getJoystickBuilderList() {
        return getJoystickFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder> 
          getJoystickFieldBuilder() {
        if (joystickBuilder_ == null) {
          joystickBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdate.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.JoystickUpdateOrBuilder>(
                  joystick_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          joystick_ = null;
        }
        return joystickBuilder_;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate> tactile_ =
        java.util.Collections.emptyList();
      private void ensureTactileIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          tactile_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate>(tactile_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder> tactileBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate> getTactileList() {
        if (tactileBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tactile_);
        } else {
          return tactileBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public int getTactileCount() {
        if (tactileBuilder_ == null) {
          return tactile_.size();
        } else {
          return tactileBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate getTactile(int index) {
        if (tactileBuilder_ == null) {
          return tactile_.get(index);
        } else {
          return tactileBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder setTactile(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.set(index, value);
          onChanged();
        } else {
          tactileBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder setTactile(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.set(index, builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder addTactile(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.add(value);
          onChanged();
        } else {
          tactileBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder addTactile(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.add(index, value);
          onChanged();
        } else {
          tactileBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder addTactile(
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.add(builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder addTactile(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.add(index, builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder addAllTactile(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate> values) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tactile_);
          onChanged();
        } else {
          tactileBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder clearTactile() {
        if (tactileBuilder_ == null) {
          tactile_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          tactileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public Builder removeTactile(int index) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.remove(index);
          onChanged();
        } else {
          tactileBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder getTactileBuilder(
          int index) {
        return getTactileFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder getTactileOrBuilder(
          int index) {
        if (tactileBuilder_ == null) {
          return tactile_.get(index);  } else {
          return tactileBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder> 
           getTactileOrBuilderList() {
        if (tactileBuilder_ != null) {
          return tactileBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tactile_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder addTactileBuilder() {
        return getTactileFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder addTactileBuilder(
          int index) {
        return getTactileFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.TactileUpdate tactile = 2;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder> 
           getTactileBuilderList() {
        return getTactileFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder> 
          getTactileFieldBuilder() {
        if (tactileBuilder_ == null) {
          tactileBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdate.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.TactileUpdateOrBuilder>(
                  tactile_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          tactile_ = null;
        }
        return tactileBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.ProgressUpdate)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.ProgressUpdate)
    private static final pro.beam.interactive.net.packet.Protocol.ProgressUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate();
    }

    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ProgressUpdate>
        PARSER = new com.google.protobuf.AbstractParser<ProgressUpdate>() {
      public ProgressUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new ProgressUpdate(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<ProgressUpdate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProgressUpdate> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Handshake_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Handshake_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_HandshakeACK_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_Users_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_Users_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_Users_QGram_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_Users_QGram_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_JoystickInfo_Data_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_JoystickInfo_Data_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_ScreenPressInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_ScreenPressInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Error_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Error_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037src/main/resources/tetris.proto\022\024pro.b" +
      "eam.interactive\"/\n\tHandshake\022\017\n\007channel\030" +
      "\001 \002(\r\022\021\n\tstreamKey\030\002 \002(\t\"\016\n\014HandshakeACK" +
      "\"\260\007\n\006Report\022\014\n\004time\030\001 \002(\r\0221\n\005users\030\002 \002(\013" +
      "2\".pro.beam.interactive.Report.Users\022;\n\010" +
      "joystick\030\003 \003(\0132).pro.beam.interactive.Re" +
      "port.JoystickInfo\0229\n\007tactile\030\004 \003(\0132(.pro" +
      ".beam.interactive.Report.TactileInfo\022C\n\014" +
      "screenCoords\030\005 \003(\0132-.pro.beam.interactiv" +
      "e.Report.ScreenCoordsInfo\022A\n\013screenPress",
      "\030\006 \003(\0132,.pro.beam.interactive.Report.Scr" +
      "eenPressInfo\032\232\001\n\005Users\022\021\n\tconnected\030\001 \002(" +
      "\r\022\016\n\006quorum\030\002 \002(\r\022\016\n\006active\030\003 \002(\r\0227\n\005qgr" +
      "am\030\004 \003(\0132(.pro.beam.interactive.Report.U" +
      "sers.QGram\032%\n\005QGram\022\r\n\005delta\030\001 \002(\r\022\r\n\005us" +
      "ers\030\002 \002(\r\032\300\001\n\014JoystickInfo\022\n\n\002id\030\001 \002(\r\022A" +
      "\n\tcoordMean\030\002 \001(\0132..pro.beam.interactive" +
      ".Report.JoystickInfo.Data\022C\n\013coordStddev" +
      "\030\003 \001(\0132..pro.beam.interactive.Report.Joy" +
      "stickInfo.Data\032\034\n\004Data\022\t\n\001X\030\001 \002(\001\022\t\n\001Y\030\002",
      " \002(\001\032\\\n\013TactileInfo\022\n\n\002id\030\001 \002(\r\022\017\n\007holdi" +
      "ng\030\002 \001(\001\022\026\n\016pressFrequency\030\003 \001(\001\022\030\n\020rele" +
      "aseFrequency\030\004 \001(\001\032E\n\020ScreenCoordsInfo\022\n" +
      "\n\002id\030\001 \002(\r\022\021\n\tcoordMean\030\002 \001(\001\022\022\n\ncoordSt" +
      "dev\030\003 \001(\001\032`\n\017ScreenPressInfo\022\n\n\002id\030\001 \002(\r" +
      "\022\017\n\007holding\030\002 \001(\001\022\026\n\016pressFrequency\030\003 \001(" +
      "\001\022\030\n\020releaseFrequency\030\004 \001(\001\"\030\n\005Error\022\017\n\007" +
      "message\030\001 \002(\t\"\273\002\n\016ProgressUpdate\022\r\n\005stat" +
      "e\030\003 \001(\t\022E\n\010joystick\030\001 \003(\01323.pro.beam.int" +
      "eractive.ProgressUpdate.JoystickUpdate\022C",
      "\n\007tactile\030\002 \003(\01322.pro.beam.interactive.P" +
      "rogressUpdate.TactileUpdate\032>\n\016JoystickU" +
      "pdate\022\n\n\002id\030\001 \002(\r\022\r\n\005angle\030\002 \001(\001\022\021\n\tinte" +
      "nsity\030\003 \001(\001\032N\n\rTactileUpdate\022\n\n\002id\030\001 \002(\r" +
      "\022\020\n\010cooldown\030\002 \001(\r\022\r\n\005fired\030\003 \001(\010\022\020\n\010pro" +
      "gress\030\004 \001(\001B+\n\037pro.beam.interactive.net." +
      "packetB\010Protocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_pro_beam_interactive_Handshake_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_pro_beam_interactive_Handshake_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Handshake_descriptor,
        new java.lang.String[] { "Channel", "StreamKey", });
    internal_static_pro_beam_interactive_HandshakeACK_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_HandshakeACK_descriptor,
        new java.lang.String[] { });
    internal_static_pro_beam_interactive_Report_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_pro_beam_interactive_Report_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_descriptor,
        new java.lang.String[] { "Time", "Users", "Joystick", "Tactile", "ScreenCoords", "ScreenPress", });
    internal_static_pro_beam_interactive_Report_Users_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(0);
    internal_static_pro_beam_interactive_Report_Users_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_Users_descriptor,
        new java.lang.String[] { "Connected", "Quorum", "Active", "Qgram", });
    internal_static_pro_beam_interactive_Report_Users_QGram_descriptor =
      internal_static_pro_beam_interactive_Report_Users_descriptor.getNestedTypes().get(0);
    internal_static_pro_beam_interactive_Report_Users_QGram_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_Users_QGram_descriptor,
        new java.lang.String[] { "Delta", "Users", });
    internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(1);
    internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor,
        new java.lang.String[] { "Id", "CoordMean", "CoordStddev", });
    internal_static_pro_beam_interactive_Report_JoystickInfo_Data_descriptor =
      internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor.getNestedTypes().get(0);
    internal_static_pro_beam_interactive_Report_JoystickInfo_Data_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_JoystickInfo_Data_descriptor,
        new java.lang.String[] { "X", "Y", });
    internal_static_pro_beam_interactive_Report_TactileInfo_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(2);
    internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_TactileInfo_descriptor,
        new java.lang.String[] { "Id", "Holding", "PressFrequency", "ReleaseFrequency", });
    internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(3);
    internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_ScreenCoordsInfo_descriptor,
        new java.lang.String[] { "Id", "CoordMean", "CoordStdev", });
    internal_static_pro_beam_interactive_Report_ScreenPressInfo_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(4);
    internal_static_pro_beam_interactive_Report_ScreenPressInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_ScreenPressInfo_descriptor,
        new java.lang.String[] { "Id", "Holding", "PressFrequency", "ReleaseFrequency", });
    internal_static_pro_beam_interactive_Error_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_pro_beam_interactive_Error_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Error_descriptor,
        new java.lang.String[] { "Message", });
    internal_static_pro_beam_interactive_ProgressUpdate_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_ProgressUpdate_descriptor,
        new java.lang.String[] { "State", "Joystick", "Tactile", });
    internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_descriptor =
      internal_static_pro_beam_interactive_ProgressUpdate_descriptor.getNestedTypes().get(0);
    internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_ProgressUpdate_JoystickUpdate_descriptor,
        new java.lang.String[] { "Id", "Angle", "Intensity", });
    internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_descriptor =
      internal_static_pro_beam_interactive_ProgressUpdate_descriptor.getNestedTypes().get(1);
    internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_ProgressUpdate_TactileUpdate_descriptor,
        new java.lang.String[] { "Id", "Cooldown", "Fired", "Progress", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
