// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/resources/tetris.proto

package pro.beam.interactive.net.packet;

public final class Protocol {
  private Protocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface HandshakeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Handshake)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    boolean hasChannel();
    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    int getChannel();

    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    boolean hasStreamKey();
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    java.lang.String getStreamKey();
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    com.google.protobuf.ByteString
        getStreamKeyBytes();
  }
  /**
   * Protobuf type {@code pro.beam.interactive.Handshake}
   *
   * <pre>
   * Handshake MUST be the first message sent from clients to servers.
   * After sending it, they should wait for a HandshakeACK, which will
   * contain authentication status.
   * </pre>
   */
  public  static final class Handshake extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.Handshake)
      HandshakeOrBuilder {
    // Use Handshake.newBuilder() to construct.
    private Handshake(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Handshake() {
      channel_ = 0;
      streamKey_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Handshake(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              channel_ = input.readUInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              streamKey_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.Handshake.class, pro.beam.interactive.net.packet.Protocol.Handshake.Builder.class);
    }

    private int bitField0_;
    public static final int CHANNEL_FIELD_NUMBER = 1;
    private int channel_;
    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    public boolean hasChannel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 channel = 1;</code>
     *
     * <pre>
     * Channel ID you want to connect as.
     * </pre>
     */
    public int getChannel() {
      return channel_;
    }

    public static final int STREAMKEY_FIELD_NUMBER = 2;
    private volatile java.lang.Object streamKey_;
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    public boolean hasStreamKey() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    public java.lang.String getStreamKey() {
      java.lang.Object ref = streamKey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          streamKey_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string streamKey = 2;</code>
     *
     * <pre>
     * That channel's stream key
     * </pre>
     */
    public com.google.protobuf.ByteString
        getStreamKeyBytes() {
      java.lang.Object ref = streamKey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        streamKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChannel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStreamKey()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, channel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, streamKey_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, channel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, streamKey_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Handshake parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Handshake prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Handshake}
     *
     * <pre>
     * Handshake MUST be the first message sent from clients to servers.
     * After sending it, they should wait for a HandshakeACK, which will
     * contain authentication status.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Handshake)
        pro.beam.interactive.net.packet.Protocol.HandshakeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Handshake.class, pro.beam.interactive.net.packet.Protocol.Handshake.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.Handshake.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        channel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        streamKey_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Handshake_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.Handshake getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.Handshake.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.Handshake build() {
        pro.beam.interactive.net.packet.Protocol.Handshake result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.Handshake buildPartial() {
        pro.beam.interactive.net.packet.Protocol.Handshake result = new pro.beam.interactive.net.packet.Protocol.Handshake(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channel_ = channel_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.streamKey_ = streamKey_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.Handshake) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.Handshake)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Handshake other) {
        if (other == pro.beam.interactive.net.packet.Protocol.Handshake.getDefaultInstance()) return this;
        if (other.hasChannel()) {
          setChannel(other.getChannel());
        }
        if (other.hasStreamKey()) {
          bitField0_ |= 0x00000002;
          streamKey_ = other.streamKey_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChannel()) {
          return false;
        }
        if (!hasStreamKey()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.Handshake parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.Handshake) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int channel_ ;
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public boolean hasChannel() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public int getChannel() {
        return channel_;
      }
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public Builder setChannel(int value) {
        bitField0_ |= 0x00000001;
        channel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 channel = 1;</code>
       *
       * <pre>
       * Channel ID you want to connect as.
       * </pre>
       */
      public Builder clearChannel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channel_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object streamKey_ = "";
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public boolean hasStreamKey() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public java.lang.String getStreamKey() {
        java.lang.Object ref = streamKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            streamKey_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStreamKeyBytes() {
        java.lang.Object ref = streamKey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          streamKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public Builder setStreamKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        streamKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public Builder clearStreamKey() {
        bitField0_ = (bitField0_ & ~0x00000002);
        streamKey_ = getDefaultInstance().getStreamKey();
        onChanged();
        return this;
      }
      /**
       * <code>required string streamKey = 2;</code>
       *
       * <pre>
       * That channel's stream key
       * </pre>
       */
      public Builder setStreamKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        streamKey_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Handshake)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.Handshake)
    private static final pro.beam.interactive.net.packet.Protocol.Handshake DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Handshake();
    }

    public static pro.beam.interactive.net.packet.Protocol.Handshake getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Handshake>
        PARSER = new com.google.protobuf.AbstractParser<Handshake>() {
      public Handshake parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Handshake(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Handshake> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Handshake> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.Handshake getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HandshakeACKOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.HandshakeACK)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code pro.beam.interactive.HandshakeACK}
   *
   * <pre>
   * This is sent from the server to the client in response to a
   * Handshake message. It's only send on a successful handshake.
   * In other cases, an error will be sent.
   * </pre>
   */
  public  static final class HandshakeACK extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.HandshakeACK)
      HandshakeACKOrBuilder {
    // Use HandshakeACK.newBuilder() to construct.
    private HandshakeACK(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private HandshakeACK() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HandshakeACK(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.HandshakeACK.class, pro.beam.interactive.net.packet.Protocol.HandshakeACK.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.HandshakeACK prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.HandshakeACK}
     *
     * <pre>
     * This is sent from the server to the client in response to a
     * Handshake message. It's only send on a successful handshake.
     * In other cases, an error will be sent.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.HandshakeACK)
        pro.beam.interactive.net.packet.Protocol.HandshakeACKOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.HandshakeACK.class, pro.beam.interactive.net.packet.Protocol.HandshakeACK.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.HandshakeACK.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_HandshakeACK_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.HandshakeACK getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.HandshakeACK.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.HandshakeACK build() {
        pro.beam.interactive.net.packet.Protocol.HandshakeACK result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.HandshakeACK buildPartial() {
        pro.beam.interactive.net.packet.Protocol.HandshakeACK result = new pro.beam.interactive.net.packet.Protocol.HandshakeACK(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.HandshakeACK) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.HandshakeACK)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.HandshakeACK other) {
        if (other == pro.beam.interactive.net.packet.Protocol.HandshakeACK.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.HandshakeACK parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.HandshakeACK) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.HandshakeACK)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.HandshakeACK)
    private static final pro.beam.interactive.net.packet.Protocol.HandshakeACK DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.HandshakeACK();
    }

    public static pro.beam.interactive.net.packet.Protocol.HandshakeACK getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<HandshakeACK>
        PARSER = new com.google.protobuf.AbstractParser<HandshakeACK>() {
      public HandshakeACK parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new HandshakeACK(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<HandshakeACK> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HandshakeACK> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.HandshakeACK getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReportOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 quorum = 1;</code>
     *
     * <pre>
     * Total number of active gamers connected. Only users who have
     * given input recently (within the last couple minutes) will
     * be counted in the quorum.
     * </pre>
     */
    boolean hasQuorum();
    /**
     * <code>required uint32 quorum = 1;</code>
     *
     * <pre>
     * Total number of active gamers connected. Only users who have
     * given input recently (within the last couple minutes) will
     * be counted in the quorum.
     * </pre>
     */
    int getQuorum();

    /**
     * <code>required uint32 connected = 2;</code>
     *
     * <pre>
     * Total number of connected users. This includes users who
     * might not be active.
     * </pre>
     */
    boolean hasConnected();
    /**
     * <code>required uint32 connected = 2;</code>
     *
     * <pre>
     * Total number of connected users. This includes users who
     * might not be active.
     * </pre>
     */
    int getConnected();

    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     * Unix seconds timestamp that this report was sent at.
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     * Unix seconds timestamp that this report was sent at.
     * </pre>
     */
    int getTime();

    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> 
        getJoystickList();
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getJoystick(int index);
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    int getJoystickCount();
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
        getJoystickOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder getJoystickOrBuilder(
        int index);

    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> 
        getTactileList();
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getTactile(int index);
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    int getTactileCount();
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
        getTactileOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder getTactileOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pro.beam.interactive.Report}
   *
   * <pre>
   * The Report is send down to the streamer's computer at the
   * reportFrequency, containing information about connected
   * clients and their actions.
   * </pre>
   */
  public  static final class Report extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report)
      ReportOrBuilder {
    // Use Report.newBuilder() to construct.
    private Report(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Report() {
      quorum_ = 0;
      connected_ = 0;
      time_ = 0;
      joystick_ = java.util.Collections.emptyList();
      tactile_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Report(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              quorum_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              connected_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              time_ = input.readUInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                joystick_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo>();
                mutable_bitField0_ |= 0x00000008;
              }
              joystick_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                tactile_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo>();
                mutable_bitField0_ |= 0x00000010;
              }
              tactile_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          joystick_ = java.util.Collections.unmodifiableList(joystick_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          tactile_ = java.util.Collections.unmodifiableList(tactile_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.Report.class, pro.beam.interactive.net.packet.Protocol.Report.Builder.class);
    }

    public interface InfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.Info)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional double frequency = 1;</code>
       *
       * <pre>
       * Only present if "frequency" is requested
       * </pre>
       */
      boolean hasFrequency();
      /**
       * <code>optional double frequency = 1;</code>
       *
       * <pre>
       * Only present if "frequency" is requested
       * </pre>
       */
      double getFrequency();

      /**
       * <code>optional double mean = 2;</code>
       *
       * <pre>
       * Only present if "mean" is requested
       * </pre>
       */
      boolean hasMean();
      /**
       * <code>optional double mean = 2;</code>
       *
       * <pre>
       * Only present if "mean" is requested
       * </pre>
       */
      double getMean();

      /**
       * <code>optional double stdev = 3;</code>
       *
       * <pre>
       * Only present if "stdev" is requested
       * </pre>
       */
      boolean hasStdev();
      /**
       * <code>optional double stdev = 3;</code>
       *
       * <pre>
       * Only present if "stdev" is requested
       * </pre>
       */
      double getStdev();

      /**
       * <code>optional double upperQuartile = 4;</code>
       *
       * <pre>
       * Only present if "quartiles" are requested
       * </pre>
       */
      boolean hasUpperQuartile();
      /**
       * <code>optional double upperQuartile = 4;</code>
       *
       * <pre>
       * Only present if "quartiles" are requested
       * </pre>
       */
      double getUpperQuartile();

      /**
       * <code>optional double lowerQuartile = 5;</code>
       */
      boolean hasLowerQuartile();
      /**
       * <code>optional double lowerQuartile = 5;</code>
       */
      double getLowerQuartile();

      /**
       * <code>optional double normalizedMean = 6;</code>
       *
       * <pre>
       * Only present if "normalized_mean" is requested
       * </pre>
       */
      boolean hasNormalizedMean();
      /**
       * <code>optional double normalizedMean = 6;</code>
       *
       * <pre>
       * Only present if "normalized_mean" is requested
       * </pre>
       */
      double getNormalizedMean();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.Info}
     *
     * <pre>
     * Contains information as required in game's analysis.
     * </pre>
     */
    public  static final class Info extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.Info)
        InfoOrBuilder {
      // Use Info.newBuilder() to construct.
      private Info(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Info() {
        frequency_ = 0D;
        mean_ = 0D;
        stdev_ = 0D;
        upperQuartile_ = 0D;
        lowerQuartile_ = 0D;
        normalizedMean_ = 0D;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Info(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 9: {
                bitField0_ |= 0x00000001;
                frequency_ = input.readDouble();
                break;
              }
              case 17: {
                bitField0_ |= 0x00000002;
                mean_ = input.readDouble();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                stdev_ = input.readDouble();
                break;
              }
              case 33: {
                bitField0_ |= 0x00000008;
                upperQuartile_ = input.readDouble();
                break;
              }
              case 41: {
                bitField0_ |= 0x00000010;
                lowerQuartile_ = input.readDouble();
                break;
              }
              case 49: {
                bitField0_ |= 0x00000020;
                normalizedMean_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Info_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Info_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.Info.class, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder.class);
      }

      private int bitField0_;
      public static final int FREQUENCY_FIELD_NUMBER = 1;
      private double frequency_;
      /**
       * <code>optional double frequency = 1;</code>
       *
       * <pre>
       * Only present if "frequency" is requested
       * </pre>
       */
      public boolean hasFrequency() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double frequency = 1;</code>
       *
       * <pre>
       * Only present if "frequency" is requested
       * </pre>
       */
      public double getFrequency() {
        return frequency_;
      }

      public static final int MEAN_FIELD_NUMBER = 2;
      private double mean_;
      /**
       * <code>optional double mean = 2;</code>
       *
       * <pre>
       * Only present if "mean" is requested
       * </pre>
       */
      public boolean hasMean() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double mean = 2;</code>
       *
       * <pre>
       * Only present if "mean" is requested
       * </pre>
       */
      public double getMean() {
        return mean_;
      }

      public static final int STDEV_FIELD_NUMBER = 3;
      private double stdev_;
      /**
       * <code>optional double stdev = 3;</code>
       *
       * <pre>
       * Only present if "stdev" is requested
       * </pre>
       */
      public boolean hasStdev() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double stdev = 3;</code>
       *
       * <pre>
       * Only present if "stdev" is requested
       * </pre>
       */
      public double getStdev() {
        return stdev_;
      }

      public static final int UPPERQUARTILE_FIELD_NUMBER = 4;
      private double upperQuartile_;
      /**
       * <code>optional double upperQuartile = 4;</code>
       *
       * <pre>
       * Only present if "quartiles" are requested
       * </pre>
       */
      public boolean hasUpperQuartile() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double upperQuartile = 4;</code>
       *
       * <pre>
       * Only present if "quartiles" are requested
       * </pre>
       */
      public double getUpperQuartile() {
        return upperQuartile_;
      }

      public static final int LOWERQUARTILE_FIELD_NUMBER = 5;
      private double lowerQuartile_;
      /**
       * <code>optional double lowerQuartile = 5;</code>
       */
      public boolean hasLowerQuartile() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double lowerQuartile = 5;</code>
       */
      public double getLowerQuartile() {
        return lowerQuartile_;
      }

      public static final int NORMALIZEDMEAN_FIELD_NUMBER = 6;
      private double normalizedMean_;
      /**
       * <code>optional double normalizedMean = 6;</code>
       *
       * <pre>
       * Only present if "normalized_mean" is requested
       * </pre>
       */
      public boolean hasNormalizedMean() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double normalizedMean = 6;</code>
       *
       * <pre>
       * Only present if "normalized_mean" is requested
       * </pre>
       */
      public double getNormalizedMean() {
        return normalizedMean_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeDouble(1, frequency_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeDouble(2, mean_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, stdev_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeDouble(4, upperQuartile_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeDouble(5, lowerQuartile_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeDouble(6, normalizedMean_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, frequency_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, mean_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, stdev_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, upperQuartile_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(5, lowerQuartile_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(6, normalizedMean_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.Info parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.Info prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.Info}
       *
       * <pre>
       * Contains information as required in game's analysis.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.Info)
          pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Info_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Info_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.Info.class, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.Info.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          frequency_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000001);
          mean_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000002);
          stdev_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          upperQuartile_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000008);
          lowerQuartile_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000010);
          normalizedMean_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_Info_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.Info getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.Info build() {
          pro.beam.interactive.net.packet.Protocol.Report.Info result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.Info buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.Info result = new pro.beam.interactive.net.packet.Protocol.Report.Info(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.frequency_ = frequency_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.mean_ = mean_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.stdev_ = stdev_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.upperQuartile_ = upperQuartile_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.lowerQuartile_ = lowerQuartile_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.normalizedMean_ = normalizedMean_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.Info) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.Info)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.Info other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance()) return this;
          if (other.hasFrequency()) {
            setFrequency(other.getFrequency());
          }
          if (other.hasMean()) {
            setMean(other.getMean());
          }
          if (other.hasStdev()) {
            setStdev(other.getStdev());
          }
          if (other.hasUpperQuartile()) {
            setUpperQuartile(other.getUpperQuartile());
          }
          if (other.hasLowerQuartile()) {
            setLowerQuartile(other.getLowerQuartile());
          }
          if (other.hasNormalizedMean()) {
            setNormalizedMean(other.getNormalizedMean());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.Info parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.Info) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private double frequency_ ;
        /**
         * <code>optional double frequency = 1;</code>
         *
         * <pre>
         * Only present if "frequency" is requested
         * </pre>
         */
        public boolean hasFrequency() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional double frequency = 1;</code>
         *
         * <pre>
         * Only present if "frequency" is requested
         * </pre>
         */
        public double getFrequency() {
          return frequency_;
        }
        /**
         * <code>optional double frequency = 1;</code>
         *
         * <pre>
         * Only present if "frequency" is requested
         * </pre>
         */
        public Builder setFrequency(double value) {
          bitField0_ |= 0x00000001;
          frequency_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double frequency = 1;</code>
         *
         * <pre>
         * Only present if "frequency" is requested
         * </pre>
         */
        public Builder clearFrequency() {
          bitField0_ = (bitField0_ & ~0x00000001);
          frequency_ = 0D;
          onChanged();
          return this;
        }

        private double mean_ ;
        /**
         * <code>optional double mean = 2;</code>
         *
         * <pre>
         * Only present if "mean" is requested
         * </pre>
         */
        public boolean hasMean() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional double mean = 2;</code>
         *
         * <pre>
         * Only present if "mean" is requested
         * </pre>
         */
        public double getMean() {
          return mean_;
        }
        /**
         * <code>optional double mean = 2;</code>
         *
         * <pre>
         * Only present if "mean" is requested
         * </pre>
         */
        public Builder setMean(double value) {
          bitField0_ |= 0x00000002;
          mean_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double mean = 2;</code>
         *
         * <pre>
         * Only present if "mean" is requested
         * </pre>
         */
        public Builder clearMean() {
          bitField0_ = (bitField0_ & ~0x00000002);
          mean_ = 0D;
          onChanged();
          return this;
        }

        private double stdev_ ;
        /**
         * <code>optional double stdev = 3;</code>
         *
         * <pre>
         * Only present if "stdev" is requested
         * </pre>
         */
        public boolean hasStdev() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double stdev = 3;</code>
         *
         * <pre>
         * Only present if "stdev" is requested
         * </pre>
         */
        public double getStdev() {
          return stdev_;
        }
        /**
         * <code>optional double stdev = 3;</code>
         *
         * <pre>
         * Only present if "stdev" is requested
         * </pre>
         */
        public Builder setStdev(double value) {
          bitField0_ |= 0x00000004;
          stdev_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double stdev = 3;</code>
         *
         * <pre>
         * Only present if "stdev" is requested
         * </pre>
         */
        public Builder clearStdev() {
          bitField0_ = (bitField0_ & ~0x00000004);
          stdev_ = 0D;
          onChanged();
          return this;
        }

        private double upperQuartile_ ;
        /**
         * <code>optional double upperQuartile = 4;</code>
         *
         * <pre>
         * Only present if "quartiles" are requested
         * </pre>
         */
        public boolean hasUpperQuartile() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double upperQuartile = 4;</code>
         *
         * <pre>
         * Only present if "quartiles" are requested
         * </pre>
         */
        public double getUpperQuartile() {
          return upperQuartile_;
        }
        /**
         * <code>optional double upperQuartile = 4;</code>
         *
         * <pre>
         * Only present if "quartiles" are requested
         * </pre>
         */
        public Builder setUpperQuartile(double value) {
          bitField0_ |= 0x00000008;
          upperQuartile_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double upperQuartile = 4;</code>
         *
         * <pre>
         * Only present if "quartiles" are requested
         * </pre>
         */
        public Builder clearUpperQuartile() {
          bitField0_ = (bitField0_ & ~0x00000008);
          upperQuartile_ = 0D;
          onChanged();
          return this;
        }

        private double lowerQuartile_ ;
        /**
         * <code>optional double lowerQuartile = 5;</code>
         */
        public boolean hasLowerQuartile() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional double lowerQuartile = 5;</code>
         */
        public double getLowerQuartile() {
          return lowerQuartile_;
        }
        /**
         * <code>optional double lowerQuartile = 5;</code>
         */
        public Builder setLowerQuartile(double value) {
          bitField0_ |= 0x00000010;
          lowerQuartile_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double lowerQuartile = 5;</code>
         */
        public Builder clearLowerQuartile() {
          bitField0_ = (bitField0_ & ~0x00000010);
          lowerQuartile_ = 0D;
          onChanged();
          return this;
        }

        private double normalizedMean_ ;
        /**
         * <code>optional double normalizedMean = 6;</code>
         *
         * <pre>
         * Only present if "normalized_mean" is requested
         * </pre>
         */
        public boolean hasNormalizedMean() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional double normalizedMean = 6;</code>
         *
         * <pre>
         * Only present if "normalized_mean" is requested
         * </pre>
         */
        public double getNormalizedMean() {
          return normalizedMean_;
        }
        /**
         * <code>optional double normalizedMean = 6;</code>
         *
         * <pre>
         * Only present if "normalized_mean" is requested
         * </pre>
         */
        public Builder setNormalizedMean(double value) {
          bitField0_ |= 0x00000020;
          normalizedMean_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double normalizedMean = 6;</code>
         *
         * <pre>
         * Only present if "normalized_mean" is requested
         * </pre>
         */
        public Builder clearNormalizedMean() {
          bitField0_ = (bitField0_ & ~0x00000020);
          normalizedMean_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.Info)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.Info)
      private static final pro.beam.interactive.net.packet.Protocol.Report.Info DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.Info();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.Info getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Info>
          PARSER = new com.google.protobuf.AbstractParser<Info>() {
        public Info parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Info(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Info> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Info> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.Info getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface JoystickInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.JoystickInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 axis = 1;</code>
       */
      boolean hasAxis();
      /**
       * <code>required uint32 axis = 1;</code>
       */
      int getAxis();

      /**
       * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
       */
      boolean hasInfo();
      /**
       * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.Info getInfo();
      /**
       * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getInfoOrBuilder();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.JoystickInfo}
     */
    public  static final class JoystickInfo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.JoystickInfo)
        JoystickInfoOrBuilder {
      // Use JoystickInfo.newBuilder() to construct.
      private JoystickInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private JoystickInfo() {
        axis_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private JoystickInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                axis_ = input.readUInt32();
                break;
              }
              case 18: {
                pro.beam.interactive.net.packet.Protocol.Report.Info.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = info_.toBuilder();
                }
                info_ = input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.Info.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(info_);
                  info_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.class, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder.class);
      }

      private int bitField0_;
      public static final int AXIS_FIELD_NUMBER = 1;
      private int axis_;
      /**
       * <code>required uint32 axis = 1;</code>
       */
      public boolean hasAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 axis = 1;</code>
       */
      public int getAxis() {
        return axis_;
      }

      public static final int INFO_FIELD_NUMBER = 2;
      private pro.beam.interactive.net.packet.Protocol.Report.Info info_;
      /**
       * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.Info getInfo() {
        return info_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : info_;
      }
      /**
       * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getInfoOrBuilder() {
        return info_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : info_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasAxis()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasInfo()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, axis_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, getInfo());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, axis_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getInfo());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.JoystickInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.JoystickInfo)
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.class, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getInfoFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          axis_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (infoBuilder_ == null) {
            info_ = null;
          } else {
            infoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo build() {
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo result = new pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.axis_ = axis_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (infoBuilder_ == null) {
            result.info_ = info_;
          } else {
            result.info_ = infoBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance()) return this;
          if (other.hasAxis()) {
            setAxis(other.getAxis());
          }
          if (other.hasInfo()) {
            mergeInfo(other.getInfo());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasAxis()) {
            return false;
          }
          if (!hasInfo()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int axis_ ;
        /**
         * <code>required uint32 axis = 1;</code>
         */
        public boolean hasAxis() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 axis = 1;</code>
         */
        public int getAxis() {
          return axis_;
        }
        /**
         * <code>required uint32 axis = 1;</code>
         */
        public Builder setAxis(int value) {
          bitField0_ |= 0x00000001;
          axis_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 axis = 1;</code>
         */
        public Builder clearAxis() {
          bitField0_ = (bitField0_ & ~0x00000001);
          axis_ = 0;
          onChanged();
          return this;
        }

        private pro.beam.interactive.net.packet.Protocol.Report.Info info_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder> infoBuilder_;
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public boolean hasInfo() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Info getInfo() {
          if (infoBuilder_ == null) {
            return info_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : info_;
          } else {
            return infoBuilder_.getMessage();
          }
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public Builder setInfo(pro.beam.interactive.net.packet.Protocol.Report.Info value) {
          if (infoBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            info_ = value;
            onChanged();
          } else {
            infoBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public Builder setInfo(
            pro.beam.interactive.net.packet.Protocol.Report.Info.Builder builderForValue) {
          if (infoBuilder_ == null) {
            info_ = builderForValue.build();
            onChanged();
          } else {
            infoBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public Builder mergeInfo(pro.beam.interactive.net.packet.Protocol.Report.Info value) {
          if (infoBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                info_ != null &&
                info_ != pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance()) {
              info_ =
                pro.beam.interactive.net.packet.Protocol.Report.Info.newBuilder(info_).mergeFrom(value).buildPartial();
            } else {
              info_ = value;
            }
            onChanged();
          } else {
            infoBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public Builder clearInfo() {
          if (infoBuilder_ == null) {
            info_ = null;
            onChanged();
          } else {
            infoBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Info.Builder getInfoBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getInfoFieldBuilder().getBuilder();
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getInfoOrBuilder() {
          if (infoBuilder_ != null) {
            return infoBuilder_.getMessageOrBuilder();
          } else {
            return info_ == null ?
                pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : info_;
          }
        }
        /**
         * <code>required .pro.beam.interactive.Report.Info info = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder> 
            getInfoFieldBuilder() {
          if (infoBuilder_ == null) {
            infoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder>(
                    getInfo(),
                    getParentForChildren(),
                    isClean());
            info_ = null;
          }
          return infoBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.JoystickInfo)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.JoystickInfo)
      private static final pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<JoystickInfo>
          PARSER = new com.google.protobuf.AbstractParser<JoystickInfo>() {
        public JoystickInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new JoystickInfo(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<JoystickInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<JoystickInfo> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TactileInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Report.TactileInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required uint32 code = 1;</code>
       */
      boolean hasCode();
      /**
       * <code>required uint32 code = 1;</code>
       */
      int getCode();

      /**
       * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
       */
      boolean hasUp();
      /**
       * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.Info getUp();
      /**
       * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getUpOrBuilder();

      /**
       * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
       */
      boolean hasDown();
      /**
       * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.Info getDown();
      /**
       * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
       */
      pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getDownOrBuilder();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report.TactileInfo}
     *
     * <pre>
     * Wraps an Info to provide the key code, which might be easier
     * to use as a means of identification.
     * </pre>
     */
    public  static final class TactileInfo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.Report.TactileInfo)
        TactileInfoOrBuilder {
      // Use TactileInfo.newBuilder() to construct.
      private TactileInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private TactileInfo() {
        code_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TactileInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                code_ = input.readUInt32();
                break;
              }
              case 18: {
                pro.beam.interactive.net.packet.Protocol.Report.Info.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = up_.toBuilder();
                }
                up_ = input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.Info.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(up_);
                  up_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                pro.beam.interactive.net.packet.Protocol.Report.Info.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = down_.toBuilder();
                }
                down_ = input.readMessage(pro.beam.interactive.net.packet.Protocol.Report.Info.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(down_);
                  down_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.class, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder.class);
      }

      private int bitField0_;
      public static final int CODE_FIELD_NUMBER = 1;
      private int code_;
      /**
       * <code>required uint32 code = 1;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 code = 1;</code>
       */
      public int getCode() {
        return code_;
      }

      public static final int UP_FIELD_NUMBER = 2;
      private pro.beam.interactive.net.packet.Protocol.Report.Info up_;
      /**
       * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
       */
      public boolean hasUp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.Info getUp() {
        return up_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : up_;
      }
      /**
       * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getUpOrBuilder() {
        return up_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : up_;
      }

      public static final int DOWN_FIELD_NUMBER = 3;
      private pro.beam.interactive.net.packet.Protocol.Report.Info down_;
      /**
       * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
       */
      public boolean hasDown() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.Info getDown() {
        return down_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : down_;
      }
      /**
       * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getDownOrBuilder() {
        return down_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : down_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasCode()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, code_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, getUp());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, getDown());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, code_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getUp());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getDown());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.Report.TactileInfo}
       *
       * <pre>
       * Wraps an Info to provide the key code, which might be easier
       * to use as a means of identification.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report.TactileInfo)
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.class, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getUpFieldBuilder();
            getDownFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          code_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (upBuilder_ == null) {
            up_ = null;
          } else {
            upBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (downBuilder_ == null) {
            down_ = null;
          } else {
            downBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo build() {
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo buildPartial() {
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo result = new pro.beam.interactive.net.packet.Protocol.Report.TactileInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.code_ = code_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (upBuilder_ == null) {
            result.up_ = up_;
          } else {
            result.up_ = upBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (downBuilder_ == null) {
            result.down_ = down_;
          } else {
            result.down_ = downBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.Report.TactileInfo) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report.TactileInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo other) {
          if (other == pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance()) return this;
          if (other.hasCode()) {
            setCode(other.getCode());
          }
          if (other.hasUp()) {
            mergeUp(other.getUp());
          }
          if (other.hasDown()) {
            mergeDown(other.getDown());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasCode()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report.TactileInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int code_ ;
        /**
         * <code>required uint32 code = 1;</code>
         */
        public boolean hasCode() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 code = 1;</code>
         */
        public int getCode() {
          return code_;
        }
        /**
         * <code>required uint32 code = 1;</code>
         */
        public Builder setCode(int value) {
          bitField0_ |= 0x00000001;
          code_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 code = 1;</code>
         */
        public Builder clearCode() {
          bitField0_ = (bitField0_ & ~0x00000001);
          code_ = 0;
          onChanged();
          return this;
        }

        private pro.beam.interactive.net.packet.Protocol.Report.Info up_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder> upBuilder_;
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public boolean hasUp() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Info getUp() {
          if (upBuilder_ == null) {
            return up_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : up_;
          } else {
            return upBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public Builder setUp(pro.beam.interactive.net.packet.Protocol.Report.Info value) {
          if (upBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            up_ = value;
            onChanged();
          } else {
            upBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public Builder setUp(
            pro.beam.interactive.net.packet.Protocol.Report.Info.Builder builderForValue) {
          if (upBuilder_ == null) {
            up_ = builderForValue.build();
            onChanged();
          } else {
            upBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public Builder mergeUp(pro.beam.interactive.net.packet.Protocol.Report.Info value) {
          if (upBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                up_ != null &&
                up_ != pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance()) {
              up_ =
                pro.beam.interactive.net.packet.Protocol.Report.Info.newBuilder(up_).mergeFrom(value).buildPartial();
            } else {
              up_ = value;
            }
            onChanged();
          } else {
            upBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public Builder clearUp() {
          if (upBuilder_ == null) {
            up_ = null;
            onChanged();
          } else {
            upBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Info.Builder getUpBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getUpFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getUpOrBuilder() {
          if (upBuilder_ != null) {
            return upBuilder_.getMessageOrBuilder();
          } else {
            return up_ == null ?
                pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : up_;
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info up = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder> 
            getUpFieldBuilder() {
          if (upBuilder_ == null) {
            upBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder>(
                    getUp(),
                    getParentForChildren(),
                    isClean());
            up_ = null;
          }
          return upBuilder_;
        }

        private pro.beam.interactive.net.packet.Protocol.Report.Info down_ = null;
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder> downBuilder_;
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public boolean hasDown() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Info getDown() {
          if (downBuilder_ == null) {
            return down_ == null ? pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : down_;
          } else {
            return downBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public Builder setDown(pro.beam.interactive.net.packet.Protocol.Report.Info value) {
          if (downBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            down_ = value;
            onChanged();
          } else {
            downBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public Builder setDown(
            pro.beam.interactive.net.packet.Protocol.Report.Info.Builder builderForValue) {
          if (downBuilder_ == null) {
            down_ = builderForValue.build();
            onChanged();
          } else {
            downBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public Builder mergeDown(pro.beam.interactive.net.packet.Protocol.Report.Info value) {
          if (downBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                down_ != null &&
                down_ != pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance()) {
              down_ =
                pro.beam.interactive.net.packet.Protocol.Report.Info.newBuilder(down_).mergeFrom(value).buildPartial();
            } else {
              down_ = value;
            }
            onChanged();
          } else {
            downBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public Builder clearDown() {
          if (downBuilder_ == null) {
            down_ = null;
            onChanged();
          } else {
            downBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.Info.Builder getDownBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getDownFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        public pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder getDownOrBuilder() {
          if (downBuilder_ != null) {
            return downBuilder_.getMessageOrBuilder();
          } else {
            return down_ == null ?
                pro.beam.interactive.net.packet.Protocol.Report.Info.getDefaultInstance() : down_;
          }
        }
        /**
         * <code>optional .pro.beam.interactive.Report.Info down = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder> 
            getDownFieldBuilder() {
          if (downBuilder_ == null) {
            downBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                pro.beam.interactive.net.packet.Protocol.Report.Info, pro.beam.interactive.net.packet.Protocol.Report.Info.Builder, pro.beam.interactive.net.packet.Protocol.Report.InfoOrBuilder>(
                    getDown(),
                    getParentForChildren(),
                    isClean());
            down_ = null;
          }
          return downBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report.TactileInfo)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report.TactileInfo)
      private static final pro.beam.interactive.net.packet.Protocol.Report.TactileInfo DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report.TactileInfo();
      }

      public static pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<TactileInfo>
          PARSER = new com.google.protobuf.AbstractParser<TactileInfo>() {
        public TactileInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new TactileInfo(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<TactileInfo> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TactileInfo> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int QUORUM_FIELD_NUMBER = 1;
    private int quorum_;
    /**
     * <code>required uint32 quorum = 1;</code>
     *
     * <pre>
     * Total number of active gamers connected. Only users who have
     * given input recently (within the last couple minutes) will
     * be counted in the quorum.
     * </pre>
     */
    public boolean hasQuorum() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 quorum = 1;</code>
     *
     * <pre>
     * Total number of active gamers connected. Only users who have
     * given input recently (within the last couple minutes) will
     * be counted in the quorum.
     * </pre>
     */
    public int getQuorum() {
      return quorum_;
    }

    public static final int CONNECTED_FIELD_NUMBER = 2;
    private int connected_;
    /**
     * <code>required uint32 connected = 2;</code>
     *
     * <pre>
     * Total number of connected users. This includes users who
     * might not be active.
     * </pre>
     */
    public boolean hasConnected() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 connected = 2;</code>
     *
     * <pre>
     * Total number of connected users. This includes users who
     * might not be active.
     * </pre>
     */
    public int getConnected() {
      return connected_;
    }

    public static final int TIME_FIELD_NUMBER = 3;
    private int time_;
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     * Unix seconds timestamp that this report was sent at.
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 time = 3;</code>
     *
     * <pre>
     * Unix seconds timestamp that this report was sent at.
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    public static final int JOYSTICK_FIELD_NUMBER = 4;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> joystick_;
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> getJoystickList() {
      return joystick_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
        getJoystickOrBuilderList() {
      return joystick_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    public int getJoystickCount() {
      return joystick_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getJoystick(int index) {
      return joystick_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
     *
     * <pre>
     * Report for the mouse control.
     * </pre>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder getJoystickOrBuilder(
        int index) {
      return joystick_.get(index);
    }

    public static final int TACTILE_FIELD_NUMBER = 5;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> tactile_;
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> getTactileList() {
      return tactile_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
        getTactileOrBuilderList() {
      return tactile_;
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    public int getTactileCount() {
      return tactile_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getTactile(int index) {
      return tactile_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
     *
     * <pre>
     * Report for key controls. The order and index of reports
     * matches those originally given in the handshake.
     * </pre>
     */
    public pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder getTactileOrBuilder(
        int index) {
      return tactile_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasQuorum()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasConnected()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getJoystickCount(); i++) {
        if (!getJoystick(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTactileCount(); i++) {
        if (!getTactile(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, quorum_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, connected_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, time_);
      }
      for (int i = 0; i < joystick_.size(); i++) {
        output.writeMessage(4, joystick_.get(i));
      }
      for (int i = 0; i < tactile_.size(); i++) {
        output.writeMessage(5, tactile_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, quorum_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, connected_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, time_);
      }
      for (int i = 0; i < joystick_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, joystick_.get(i));
      }
      for (int i = 0; i < tactile_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, tactile_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Report parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Report prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Report}
     *
     * <pre>
     * The Report is send down to the streamer's computer at the
     * reportFrequency, containing information about connected
     * clients and their actions.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Report)
        pro.beam.interactive.net.packet.Protocol.ReportOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Report.class, pro.beam.interactive.net.packet.Protocol.Report.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.Report.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getJoystickFieldBuilder();
          getTactileFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        quorum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        connected_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (joystickBuilder_ == null) {
          joystick_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          joystickBuilder_.clear();
        }
        if (tactileBuilder_ == null) {
          tactile_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          tactileBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Report_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.Report getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.Report.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.Report build() {
        pro.beam.interactive.net.packet.Protocol.Report result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.Report buildPartial() {
        pro.beam.interactive.net.packet.Protocol.Report result = new pro.beam.interactive.net.packet.Protocol.Report(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.quorum_ = quorum_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.connected_ = connected_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.time_ = time_;
        if (joystickBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            joystick_ = java.util.Collections.unmodifiableList(joystick_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.joystick_ = joystick_;
        } else {
          result.joystick_ = joystickBuilder_.build();
        }
        if (tactileBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            tactile_ = java.util.Collections.unmodifiableList(tactile_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.tactile_ = tactile_;
        } else {
          result.tactile_ = tactileBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.Report) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.Report)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Report other) {
        if (other == pro.beam.interactive.net.packet.Protocol.Report.getDefaultInstance()) return this;
        if (other.hasQuorum()) {
          setQuorum(other.getQuorum());
        }
        if (other.hasConnected()) {
          setConnected(other.getConnected());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (joystickBuilder_ == null) {
          if (!other.joystick_.isEmpty()) {
            if (joystick_.isEmpty()) {
              joystick_ = other.joystick_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureJoystickIsMutable();
              joystick_.addAll(other.joystick_);
            }
            onChanged();
          }
        } else {
          if (!other.joystick_.isEmpty()) {
            if (joystickBuilder_.isEmpty()) {
              joystickBuilder_.dispose();
              joystickBuilder_ = null;
              joystick_ = other.joystick_;
              bitField0_ = (bitField0_ & ~0x00000008);
              joystickBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getJoystickFieldBuilder() : null;
            } else {
              joystickBuilder_.addAllMessages(other.joystick_);
            }
          }
        }
        if (tactileBuilder_ == null) {
          if (!other.tactile_.isEmpty()) {
            if (tactile_.isEmpty()) {
              tactile_ = other.tactile_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureTactileIsMutable();
              tactile_.addAll(other.tactile_);
            }
            onChanged();
          }
        } else {
          if (!other.tactile_.isEmpty()) {
            if (tactileBuilder_.isEmpty()) {
              tactileBuilder_.dispose();
              tactileBuilder_ = null;
              tactile_ = other.tactile_;
              bitField0_ = (bitField0_ & ~0x00000010);
              tactileBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTactileFieldBuilder() : null;
            } else {
              tactileBuilder_.addAllMessages(other.tactile_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasQuorum()) {
          return false;
        }
        if (!hasConnected()) {
          return false;
        }
        if (!hasTime()) {
          return false;
        }
        for (int i = 0; i < getJoystickCount(); i++) {
          if (!getJoystick(i).isInitialized()) {
            return false;
          }
        }
        for (int i = 0; i < getTactileCount(); i++) {
          if (!getTactile(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.Report parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.Report) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int quorum_ ;
      /**
       * <code>required uint32 quorum = 1;</code>
       *
       * <pre>
       * Total number of active gamers connected. Only users who have
       * given input recently (within the last couple minutes) will
       * be counted in the quorum.
       * </pre>
       */
      public boolean hasQuorum() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 quorum = 1;</code>
       *
       * <pre>
       * Total number of active gamers connected. Only users who have
       * given input recently (within the last couple minutes) will
       * be counted in the quorum.
       * </pre>
       */
      public int getQuorum() {
        return quorum_;
      }
      /**
       * <code>required uint32 quorum = 1;</code>
       *
       * <pre>
       * Total number of active gamers connected. Only users who have
       * given input recently (within the last couple minutes) will
       * be counted in the quorum.
       * </pre>
       */
      public Builder setQuorum(int value) {
        bitField0_ |= 0x00000001;
        quorum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 quorum = 1;</code>
       *
       * <pre>
       * Total number of active gamers connected. Only users who have
       * given input recently (within the last couple minutes) will
       * be counted in the quorum.
       * </pre>
       */
      public Builder clearQuorum() {
        bitField0_ = (bitField0_ & ~0x00000001);
        quorum_ = 0;
        onChanged();
        return this;
      }

      private int connected_ ;
      /**
       * <code>required uint32 connected = 2;</code>
       *
       * <pre>
       * Total number of connected users. This includes users who
       * might not be active.
       * </pre>
       */
      public boolean hasConnected() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 connected = 2;</code>
       *
       * <pre>
       * Total number of connected users. This includes users who
       * might not be active.
       * </pre>
       */
      public int getConnected() {
        return connected_;
      }
      /**
       * <code>required uint32 connected = 2;</code>
       *
       * <pre>
       * Total number of connected users. This includes users who
       * might not be active.
       * </pre>
       */
      public Builder setConnected(int value) {
        bitField0_ |= 0x00000002;
        connected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 connected = 2;</code>
       *
       * <pre>
       * Total number of connected users. This includes users who
       * might not be active.
       * </pre>
       */
      public Builder clearConnected() {
        bitField0_ = (bitField0_ & ~0x00000002);
        connected_ = 0;
        onChanged();
        return this;
      }

      private int time_ ;
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       * Unix seconds timestamp that this report was sent at.
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       * Unix seconds timestamp that this report was sent at.
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       * Unix seconds timestamp that this report was sent at.
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000004;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 time = 3;</code>
       *
       * <pre>
       * Unix seconds timestamp that this report was sent at.
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        time_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> joystick_ =
        java.util.Collections.emptyList();
      private void ensureJoystickIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          joystick_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo>(joystick_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> joystickBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> getJoystickList() {
        if (joystickBuilder_ == null) {
          return java.util.Collections.unmodifiableList(joystick_);
        } else {
          return joystickBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public int getJoystickCount() {
        if (joystickBuilder_ == null) {
          return joystick_.size();
        } else {
          return joystickBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo getJoystick(int index) {
        if (joystickBuilder_ == null) {
          return joystick_.get(index);
        } else {
          return joystickBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder setJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.set(index, value);
          onChanged();
        } else {
          joystickBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder setJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.set(index, builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder addJoystick(pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.add(value);
          onChanged();
        } else {
          joystickBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder addJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo value) {
        if (joystickBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureJoystickIsMutable();
          joystick_.add(index, value);
          onChanged();
        } else {
          joystickBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder addJoystick(
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.add(builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder addJoystick(
          int index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder builderForValue) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.add(index, builderForValue.build());
          onChanged();
        } else {
          joystickBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder addAllJoystick(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo> values) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, joystick_);
          onChanged();
        } else {
          joystickBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder clearJoystick() {
        if (joystickBuilder_ == null) {
          joystick_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          joystickBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public Builder removeJoystick(int index) {
        if (joystickBuilder_ == null) {
          ensureJoystickIsMutable();
          joystick_.remove(index);
          onChanged();
        } else {
          joystickBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder getJoystickBuilder(
          int index) {
        return getJoystickFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder getJoystickOrBuilder(
          int index) {
        if (joystickBuilder_ == null) {
          return joystick_.get(index);  } else {
          return joystickBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
           getJoystickOrBuilderList() {
        if (joystickBuilder_ != null) {
          return joystickBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(joystick_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder addJoystickBuilder() {
        return getJoystickFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder addJoystickBuilder(
          int index) {
        return getJoystickFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.JoystickInfo joystick = 4;</code>
       *
       * <pre>
       * Report for the mouse control.
       * </pre>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder> 
           getJoystickBuilderList() {
        return getJoystickFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder> 
          getJoystickFieldBuilder() {
        if (joystickBuilder_ == null) {
          joystickBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.JoystickInfoOrBuilder>(
                  joystick_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          joystick_ = null;
        }
        return joystickBuilder_;
      }

      private java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> tactile_ =
        java.util.Collections.emptyList();
      private void ensureTactileIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          tactile_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo>(tactile_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> tactileBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> getTactileList() {
        if (tactileBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tactile_);
        } else {
          return tactileBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public int getTactileCount() {
        if (tactileBuilder_ == null) {
          return tactile_.size();
        } else {
          return tactileBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo getTactile(int index) {
        if (tactileBuilder_ == null) {
          return tactile_.get(index);
        } else {
          return tactileBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder setTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.set(index, value);
          onChanged();
        } else {
          tactileBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder setTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.set(index, builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder addTactile(pro.beam.interactive.net.packet.Protocol.Report.TactileInfo value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.add(value);
          onChanged();
        } else {
          tactileBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder addTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo value) {
        if (tactileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTactileIsMutable();
          tactile_.add(index, value);
          onChanged();
        } else {
          tactileBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder addTactile(
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.add(builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder addTactile(
          int index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder builderForValue) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.add(index, builderForValue.build());
          onChanged();
        } else {
          tactileBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder addAllTactile(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfo> values) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tactile_);
          onChanged();
        } else {
          tactileBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder clearTactile() {
        if (tactileBuilder_ == null) {
          tactile_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          tactileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public Builder removeTactile(int index) {
        if (tactileBuilder_ == null) {
          ensureTactileIsMutable();
          tactile_.remove(index);
          onChanged();
        } else {
          tactileBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder getTactileBuilder(
          int index) {
        return getTactileFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder getTactileOrBuilder(
          int index) {
        if (tactileBuilder_ == null) {
          return tactile_.get(index);  } else {
          return tactileBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
           getTactileOrBuilderList() {
        if (tactileBuilder_ != null) {
          return tactileBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tactile_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder addTactileBuilder() {
        return getTactileFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder addTactileBuilder(
          int index) {
        return getTactileFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.Report.TactileInfo tactile = 5;</code>
       *
       * <pre>
       * Report for key controls. The order and index of reports
       * matches those originally given in the handshake.
       * </pre>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder> 
           getTactileBuilderList() {
        return getTactileFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.Report.TactileInfo, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder> 
          getTactileFieldBuilder() {
        if (tactileBuilder_ == null) {
          tactileBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.Report.TactileInfo, pro.beam.interactive.net.packet.Protocol.Report.TactileInfo.Builder, pro.beam.interactive.net.packet.Protocol.Report.TactileInfoOrBuilder>(
                  tactile_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          tactile_ = null;
        }
        return tactileBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Report)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.Report)
    private static final pro.beam.interactive.net.packet.Protocol.Report DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Report();
    }

    public static pro.beam.interactive.net.packet.Protocol.Report getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Report>
        PARSER = new com.google.protobuf.AbstractParser<Report>() {
      public Report parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Report(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Report> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Report> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.Report getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.Error)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string message = 1;</code>
     */
    boolean hasMessage();
    /**
     * <code>required string message = 1;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>required string message = 1;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code pro.beam.interactive.Error}
   *
   * <pre>
   * An error in response to some invalid input or event.
   * </pre>
   */
  public  static final class Error extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.Error)
      ErrorOrBuilder {
    // Use Error.newBuilder() to construct.
    private Error(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Error() {
      message_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Error(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              message_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.Error.class, pro.beam.interactive.net.packet.Protocol.Error.Builder.class);
    }

    private int bitField0_;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private volatile java.lang.Object message_;
    /**
     * <code>required string message = 1;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string message = 1;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string message = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMessage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, message_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, message_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.Error parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.Error prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.Error}
     *
     * <pre>
     * An error in response to some invalid input or event.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.Error)
        pro.beam.interactive.net.packet.Protocol.ErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.Error.class, pro.beam.interactive.net.packet.Protocol.Error.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.Error.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_Error_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.Error getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.Error.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.Error build() {
        pro.beam.interactive.net.packet.Protocol.Error result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.Error buildPartial() {
        pro.beam.interactive.net.packet.Protocol.Error result = new pro.beam.interactive.net.packet.Protocol.Error(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.Error) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.Error)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.Error other) {
        if (other == pro.beam.interactive.net.packet.Protocol.Error.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          bitField0_ |= 0x00000001;
          message_ = other.message_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMessage()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.Error parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.Error) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object message_ = "";
      /**
       * <code>required string message = 1;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string message = 1;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            message_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string message = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string message = 1;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 1;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>required string message = 1;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.Error)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.Error)
    private static final pro.beam.interactive.net.packet.Protocol.Error DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.Error();
    }

    public static pro.beam.interactive.net.packet.Protocol.Error getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Error>
        PARSER = new com.google.protobuf.AbstractParser<Error>() {
      public Error parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Error(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<Error> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Error> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.Error getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProgressUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pro.beam.interactive.ProgressUpdate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress> 
        getProgressList();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress getProgress(int index);
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    int getProgressCount();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder> 
        getProgressOrBuilderList();
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder getProgressOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code pro.beam.interactive.ProgressUpdate}
   *
   * <pre>
   * A ProgressUpdate message may be sent up periodically from the Robot. It
   * contains an array of objects to update the multiple controls on the fe.
   * </pre>
   */
  public  static final class ProgressUpdate extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:pro.beam.interactive.ProgressUpdate)
      ProgressUpdateOrBuilder {
    // Use ProgressUpdate.newBuilder() to construct.
    private ProgressUpdate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ProgressUpdate() {
      progress_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProgressUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                progress_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress>();
                mutable_bitField0_ |= 0x00000001;
              }
              progress_.add(input.readMessage(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(
            new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this));
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          progress_ = java.util.Collections.unmodifiableList(progress_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pro.beam.interactive.net.packet.Protocol.ProgressUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Builder.class);
    }

    public interface ProgressOrBuilder extends
        // @@protoc_insertion_point(interface_extends:pro.beam.interactive.ProgressUpdate.Progress)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
       *
       * <pre>
       * The type of control this targets.
       * </pre>
       */
      boolean hasTarget();
      /**
       * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
       *
       * <pre>
       * The type of control this targets.
       * </pre>
       */
      pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType getTarget();

      /**
       * <code>required uint32 code = 2;</code>
       *
       * <pre>
       * The code for the control target. For tactile controls, this will be
       * the `key` code. For joystick controls, this will be the `axis`.
       * </pre>
       */
      boolean hasCode();
      /**
       * <code>required uint32 code = 2;</code>
       *
       * <pre>
       * The code for the control target. For tactile controls, this will be
       * the `key` code. For joystick controls, this will be the `axis`.
       * </pre>
       */
      int getCode();

      /**
       * <code>optional float progress = 3;</code>
       *
       * <pre>
       * The progress this input as towards some threshold, designated by the
       * robot. This must be a float value in the range [0, 1).
       * </pre>
       */
      boolean hasProgress();
      /**
       * <code>optional float progress = 3;</code>
       *
       * <pre>
       * The progress this input as towards some threshold, designated by the
       * robot. This must be a float value in the range [0, 1).
       * </pre>
       */
      float getProgress();

      /**
       * <code>optional uint32 cooldown = 4;</code>
       *
       * <pre>
       * The duration, in milliseconds, before the action effected by this input
       * may be carried out again. Note that this will decrement automatically
       * on the frontend and does not need continuous updates.
       * </pre>
       */
      boolean hasCooldown();
      /**
       * <code>optional uint32 cooldown = 4;</code>
       *
       * <pre>
       * The duration, in milliseconds, before the action effected by this input
       * may be carried out again. Note that this will decrement automatically
       * on the frontend and does not need continuous updates.
       * </pre>
       */
      int getCooldown();

      /**
       * <code>optional bool fired = 5;</code>
       *
       * <pre>
       * Denotes that the action effected by this control has
       * occurred, showing a "pulse" on the input.
       * </pre>
       */
      boolean hasFired();
      /**
       * <code>optional bool fired = 5;</code>
       *
       * <pre>
       * Denotes that the action effected by this control has
       * occurred, showing a "pulse" on the input.
       * </pre>
       */
      boolean getFired();
    }
    /**
     * Protobuf type {@code pro.beam.interactive.ProgressUpdate.Progress}
     */
    public  static final class Progress extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:pro.beam.interactive.ProgressUpdate.Progress)
        ProgressOrBuilder {
      // Use Progress.newBuilder() to construct.
      private Progress(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private Progress() {
        target_ = 0;
        code_ = 0;
        progress_ = 0F;
        cooldown_ = 0;
        fired_ = false;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Progress(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
        this();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType value = pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  target_ = rawValue;
                }
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                code_ = input.readUInt32();
                break;
              }
              case 29: {
                bitField0_ |= 0x00000004;
                progress_ = input.readFloat();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                cooldown_ = input.readUInt32();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                fired_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_Progress_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_Progress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder.class);
      }

      /**
       * Protobuf enum {@code pro.beam.interactive.ProgressUpdate.Progress.TargetType}
       */
      public enum TargetType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>TACTILE = 0;</code>
         */
        TACTILE(0, 0),
        /**
         * <code>JOYSTICK = 1;</code>
         */
        JOYSTICK(1, 1),
        ;

        /**
         * <code>TACTILE = 0;</code>
         */
        public static final int TACTILE_VALUE = 0;
        /**
         * <code>JOYSTICK = 1;</code>
         */
        public static final int JOYSTICK_VALUE = 1;


        public final int getNumber() {
          return value;
        }

        public static TargetType valueOf(int value) {
          switch (value) {
            case 0: return TACTILE;
            case 1: return JOYSTICK;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<TargetType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            TargetType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<TargetType>() {
                public TargetType findValueByNumber(int number) {
                  return TargetType.valueOf(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(index);
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.getDescriptor().getEnumTypes().get(0);
        }

        private static final TargetType[] VALUES = values();

        public static TargetType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private TargetType(int index, int value) {
          this.index = index;
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:pro.beam.interactive.ProgressUpdate.Progress.TargetType)
      }

      private int bitField0_;
      public static final int TARGET_FIELD_NUMBER = 1;
      private int target_;
      /**
       * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
       *
       * <pre>
       * The type of control this targets.
       * </pre>
       */
      public boolean hasTarget() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
       *
       * <pre>
       * The type of control this targets.
       * </pre>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType getTarget() {
        pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType result = pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType.valueOf(target_);
        return result == null ? pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType.TACTILE : result;
      }

      public static final int CODE_FIELD_NUMBER = 2;
      private int code_;
      /**
       * <code>required uint32 code = 2;</code>
       *
       * <pre>
       * The code for the control target. For tactile controls, this will be
       * the `key` code. For joystick controls, this will be the `axis`.
       * </pre>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 code = 2;</code>
       *
       * <pre>
       * The code for the control target. For tactile controls, this will be
       * the `key` code. For joystick controls, this will be the `axis`.
       * </pre>
       */
      public int getCode() {
        return code_;
      }

      public static final int PROGRESS_FIELD_NUMBER = 3;
      private float progress_;
      /**
       * <code>optional float progress = 3;</code>
       *
       * <pre>
       * The progress this input as towards some threshold, designated by the
       * robot. This must be a float value in the range [0, 1).
       * </pre>
       */
      public boolean hasProgress() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float progress = 3;</code>
       *
       * <pre>
       * The progress this input as towards some threshold, designated by the
       * robot. This must be a float value in the range [0, 1).
       * </pre>
       */
      public float getProgress() {
        return progress_;
      }

      public static final int COOLDOWN_FIELD_NUMBER = 4;
      private int cooldown_;
      /**
       * <code>optional uint32 cooldown = 4;</code>
       *
       * <pre>
       * The duration, in milliseconds, before the action effected by this input
       * may be carried out again. Note that this will decrement automatically
       * on the frontend and does not need continuous updates.
       * </pre>
       */
      public boolean hasCooldown() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 cooldown = 4;</code>
       *
       * <pre>
       * The duration, in milliseconds, before the action effected by this input
       * may be carried out again. Note that this will decrement automatically
       * on the frontend and does not need continuous updates.
       * </pre>
       */
      public int getCooldown() {
        return cooldown_;
      }

      public static final int FIRED_FIELD_NUMBER = 5;
      private boolean fired_;
      /**
       * <code>optional bool fired = 5;</code>
       *
       * <pre>
       * Denotes that the action effected by this control has
       * occurred, showing a "pulse" on the input.
       * </pre>
       */
      public boolean hasFired() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool fired = 5;</code>
       *
       * <pre>
       * Denotes that the action effected by this control has
       * occurred, showing a "pulse" on the input.
       * </pre>
       */
      public boolean getFired() {
        return fired_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasTarget()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasCode()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, target_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, code_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeFloat(3, progress_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeUInt32(4, cooldown_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeBool(5, fired_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, target_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, code_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, progress_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, cooldown_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(5, fired_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code pro.beam.interactive.ProgressUpdate.Progress}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:pro.beam.interactive.ProgressUpdate.Progress)
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_Progress_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_Progress_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder.class);
        }

        // Construct using pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          target_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          code_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          progress_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000004);
          cooldown_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          fired_ = false;
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_Progress_descriptor;
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress getDefaultInstanceForType() {
          return pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.getDefaultInstance();
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress build() {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress buildPartial() {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress result = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.target_ = target_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.code_ = code_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.progress_ = progress_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.cooldown_ = cooldown_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.fired_ = fired_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress) {
            return mergeFrom((pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress other) {
          if (other == pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.getDefaultInstance()) return this;
          if (other.hasTarget()) {
            setTarget(other.getTarget());
          }
          if (other.hasCode()) {
            setCode(other.getCode());
          }
          if (other.hasProgress()) {
            setProgress(other.getProgress());
          }
          if (other.hasCooldown()) {
            setCooldown(other.getCooldown());
          }
          if (other.hasFired()) {
            setFired(other.getFired());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          if (!hasTarget()) {
            return false;
          }
          if (!hasCode()) {
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int target_ = 0;
        /**
         * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
         *
         * <pre>
         * The type of control this targets.
         * </pre>
         */
        public boolean hasTarget() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
         *
         * <pre>
         * The type of control this targets.
         * </pre>
         */
        public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType getTarget() {
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType result = pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType.valueOf(target_);
          return result == null ? pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType.TACTILE : result;
        }
        /**
         * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
         *
         * <pre>
         * The type of control this targets.
         * </pre>
         */
        public Builder setTarget(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.TargetType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          target_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>required .pro.beam.interactive.ProgressUpdate.Progress.TargetType target = 1;</code>
         *
         * <pre>
         * The type of control this targets.
         * </pre>
         */
        public Builder clearTarget() {
          bitField0_ = (bitField0_ & ~0x00000001);
          target_ = 0;
          onChanged();
          return this;
        }

        private int code_ ;
        /**
         * <code>required uint32 code = 2;</code>
         *
         * <pre>
         * The code for the control target. For tactile controls, this will be
         * the `key` code. For joystick controls, this will be the `axis`.
         * </pre>
         */
        public boolean hasCode() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required uint32 code = 2;</code>
         *
         * <pre>
         * The code for the control target. For tactile controls, this will be
         * the `key` code. For joystick controls, this will be the `axis`.
         * </pre>
         */
        public int getCode() {
          return code_;
        }
        /**
         * <code>required uint32 code = 2;</code>
         *
         * <pre>
         * The code for the control target. For tactile controls, this will be
         * the `key` code. For joystick controls, this will be the `axis`.
         * </pre>
         */
        public Builder setCode(int value) {
          bitField0_ |= 0x00000002;
          code_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 code = 2;</code>
         *
         * <pre>
         * The code for the control target. For tactile controls, this will be
         * the `key` code. For joystick controls, this will be the `axis`.
         * </pre>
         */
        public Builder clearCode() {
          bitField0_ = (bitField0_ & ~0x00000002);
          code_ = 0;
          onChanged();
          return this;
        }

        private float progress_ ;
        /**
         * <code>optional float progress = 3;</code>
         *
         * <pre>
         * The progress this input as towards some threshold, designated by the
         * robot. This must be a float value in the range [0, 1).
         * </pre>
         */
        public boolean hasProgress() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional float progress = 3;</code>
         *
         * <pre>
         * The progress this input as towards some threshold, designated by the
         * robot. This must be a float value in the range [0, 1).
         * </pre>
         */
        public float getProgress() {
          return progress_;
        }
        /**
         * <code>optional float progress = 3;</code>
         *
         * <pre>
         * The progress this input as towards some threshold, designated by the
         * robot. This must be a float value in the range [0, 1).
         * </pre>
         */
        public Builder setProgress(float value) {
          bitField0_ |= 0x00000004;
          progress_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float progress = 3;</code>
         *
         * <pre>
         * The progress this input as towards some threshold, designated by the
         * robot. This must be a float value in the range [0, 1).
         * </pre>
         */
        public Builder clearProgress() {
          bitField0_ = (bitField0_ & ~0x00000004);
          progress_ = 0F;
          onChanged();
          return this;
        }

        private int cooldown_ ;
        /**
         * <code>optional uint32 cooldown = 4;</code>
         *
         * <pre>
         * The duration, in milliseconds, before the action effected by this input
         * may be carried out again. Note that this will decrement automatically
         * on the frontend and does not need continuous updates.
         * </pre>
         */
        public boolean hasCooldown() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional uint32 cooldown = 4;</code>
         *
         * <pre>
         * The duration, in milliseconds, before the action effected by this input
         * may be carried out again. Note that this will decrement automatically
         * on the frontend and does not need continuous updates.
         * </pre>
         */
        public int getCooldown() {
          return cooldown_;
        }
        /**
         * <code>optional uint32 cooldown = 4;</code>
         *
         * <pre>
         * The duration, in milliseconds, before the action effected by this input
         * may be carried out again. Note that this will decrement automatically
         * on the frontend and does not need continuous updates.
         * </pre>
         */
        public Builder setCooldown(int value) {
          bitField0_ |= 0x00000008;
          cooldown_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 cooldown = 4;</code>
         *
         * <pre>
         * The duration, in milliseconds, before the action effected by this input
         * may be carried out again. Note that this will decrement automatically
         * on the frontend and does not need continuous updates.
         * </pre>
         */
        public Builder clearCooldown() {
          bitField0_ = (bitField0_ & ~0x00000008);
          cooldown_ = 0;
          onChanged();
          return this;
        }

        private boolean fired_ ;
        /**
         * <code>optional bool fired = 5;</code>
         *
         * <pre>
         * Denotes that the action effected by this control has
         * occurred, showing a "pulse" on the input.
         * </pre>
         */
        public boolean hasFired() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional bool fired = 5;</code>
         *
         * <pre>
         * Denotes that the action effected by this control has
         * occurred, showing a "pulse" on the input.
         * </pre>
         */
        public boolean getFired() {
          return fired_;
        }
        /**
         * <code>optional bool fired = 5;</code>
         *
         * <pre>
         * Denotes that the action effected by this control has
         * occurred, showing a "pulse" on the input.
         * </pre>
         */
        public Builder setFired(boolean value) {
          bitField0_ |= 0x00000010;
          fired_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool fired = 5;</code>
         *
         * <pre>
         * Denotes that the action effected by this control has
         * occurred, showing a "pulse" on the input.
         * </pre>
         */
        public Builder clearFired() {
          bitField0_ = (bitField0_ & ~0x00000010);
          fired_ = false;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:pro.beam.interactive.ProgressUpdate.Progress)
      }

      // @@protoc_insertion_point(class_scope:pro.beam.interactive.ProgressUpdate.Progress)
      private static final pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress();
      }

      public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      @java.lang.Deprecated public static final com.google.protobuf.Parser<Progress>
          PARSER = new com.google.protobuf.AbstractParser<Progress>() {
        public Progress parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          try {
            return new Progress(input, extensionRegistry);
          } catch (RuntimeException e) {
            if (e.getCause() instanceof
                com.google.protobuf.InvalidProtocolBufferException) {
              throw (com.google.protobuf.InvalidProtocolBufferException)
                  e.getCause();
            }
            throw e;
          }
        }
      };

      public static com.google.protobuf.Parser<Progress> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Progress> getParserForType() {
        return PARSER;
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int PROGRESS_FIELD_NUMBER = 1;
    private java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress> progress_;
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress> getProgressList() {
      return progress_;
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder> 
        getProgressOrBuilderList() {
      return progress_;
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    public int getProgressCount() {
      return progress_.size();
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress getProgress(int index) {
      return progress_.get(index);
    }
    /**
     * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
     */
    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder getProgressOrBuilder(
        int index) {
      return progress_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getProgressCount(); i++) {
        if (!getProgress(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < progress_.size(); i++) {
        output.writeMessage(1, progress_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < progress_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, progress_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(pro.beam.interactive.net.packet.Protocol.ProgressUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code pro.beam.interactive.ProgressUpdate}
     *
     * <pre>
     * A ProgressUpdate message may be sent up periodically from the Robot. It
     * contains an array of objects to update the multiple controls on the fe.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:pro.beam.interactive.ProgressUpdate)
        pro.beam.interactive.net.packet.Protocol.ProgressUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pro.beam.interactive.net.packet.Protocol.ProgressUpdate.class, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Builder.class);
      }

      // Construct using pro.beam.interactive.net.packet.Protocol.ProgressUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getProgressFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (progressBuilder_ == null) {
          progress_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          progressBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pro.beam.interactive.net.packet.Protocol.internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate getDefaultInstanceForType() {
        return pro.beam.interactive.net.packet.Protocol.ProgressUpdate.getDefaultInstance();
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate build() {
        pro.beam.interactive.net.packet.Protocol.ProgressUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate buildPartial() {
        pro.beam.interactive.net.packet.Protocol.ProgressUpdate result = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate(this);
        int from_bitField0_ = bitField0_;
        if (progressBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            progress_ = java.util.Collections.unmodifiableList(progress_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.progress_ = progress_;
        } else {
          result.progress_ = progressBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pro.beam.interactive.net.packet.Protocol.ProgressUpdate) {
          return mergeFrom((pro.beam.interactive.net.packet.Protocol.ProgressUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pro.beam.interactive.net.packet.Protocol.ProgressUpdate other) {
        if (other == pro.beam.interactive.net.packet.Protocol.ProgressUpdate.getDefaultInstance()) return this;
        if (progressBuilder_ == null) {
          if (!other.progress_.isEmpty()) {
            if (progress_.isEmpty()) {
              progress_ = other.progress_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureProgressIsMutable();
              progress_.addAll(other.progress_);
            }
            onChanged();
          }
        } else {
          if (!other.progress_.isEmpty()) {
            if (progressBuilder_.isEmpty()) {
              progressBuilder_.dispose();
              progressBuilder_ = null;
              progress_ = other.progress_;
              bitField0_ = (bitField0_ & ~0x00000001);
              progressBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getProgressFieldBuilder() : null;
            } else {
              progressBuilder_.addAllMessages(other.progress_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getProgressCount(); i++) {
          if (!getProgress(i).isInitialized()) {
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pro.beam.interactive.net.packet.Protocol.ProgressUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pro.beam.interactive.net.packet.Protocol.ProgressUpdate) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress> progress_ =
        java.util.Collections.emptyList();
      private void ensureProgressIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          progress_ = new java.util.ArrayList<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress>(progress_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder> progressBuilder_;

      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress> getProgressList() {
        if (progressBuilder_ == null) {
          return java.util.Collections.unmodifiableList(progress_);
        } else {
          return progressBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public int getProgressCount() {
        if (progressBuilder_ == null) {
          return progress_.size();
        } else {
          return progressBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress getProgress(int index) {
        if (progressBuilder_ == null) {
          return progress_.get(index);
        } else {
          return progressBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder setProgress(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress value) {
        if (progressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProgressIsMutable();
          progress_.set(index, value);
          onChanged();
        } else {
          progressBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder setProgress(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder builderForValue) {
        if (progressBuilder_ == null) {
          ensureProgressIsMutable();
          progress_.set(index, builderForValue.build());
          onChanged();
        } else {
          progressBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder addProgress(pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress value) {
        if (progressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProgressIsMutable();
          progress_.add(value);
          onChanged();
        } else {
          progressBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder addProgress(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress value) {
        if (progressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProgressIsMutable();
          progress_.add(index, value);
          onChanged();
        } else {
          progressBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder addProgress(
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder builderForValue) {
        if (progressBuilder_ == null) {
          ensureProgressIsMutable();
          progress_.add(builderForValue.build());
          onChanged();
        } else {
          progressBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder addProgress(
          int index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder builderForValue) {
        if (progressBuilder_ == null) {
          ensureProgressIsMutable();
          progress_.add(index, builderForValue.build());
          onChanged();
        } else {
          progressBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder addAllProgress(
          java.lang.Iterable<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress> values) {
        if (progressBuilder_ == null) {
          ensureProgressIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, progress_);
          onChanged();
        } else {
          progressBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder clearProgress() {
        if (progressBuilder_ == null) {
          progress_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          progressBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public Builder removeProgress(int index) {
        if (progressBuilder_ == null) {
          ensureProgressIsMutable();
          progress_.remove(index);
          onChanged();
        } else {
          progressBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder getProgressBuilder(
          int index) {
        return getProgressFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder getProgressOrBuilder(
          int index) {
        if (progressBuilder_ == null) {
          return progress_.get(index);  } else {
          return progressBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public java.util.List<? extends pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder> 
           getProgressOrBuilderList() {
        if (progressBuilder_ != null) {
          return progressBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(progress_);
        }
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder addProgressBuilder() {
        return getProgressFieldBuilder().addBuilder(
            pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder addProgressBuilder(
          int index) {
        return getProgressFieldBuilder().addBuilder(
            index, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.getDefaultInstance());
      }
      /**
       * <code>repeated .pro.beam.interactive.ProgressUpdate.Progress progress = 1;</code>
       */
      public java.util.List<pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder> 
           getProgressBuilderList() {
        return getProgressFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder> 
          getProgressFieldBuilder() {
        if (progressBuilder_ == null) {
          progressBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.Progress.Builder, pro.beam.interactive.net.packet.Protocol.ProgressUpdate.ProgressOrBuilder>(
                  progress_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          progress_ = null;
        }
        return progressBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:pro.beam.interactive.ProgressUpdate)
    }

    // @@protoc_insertion_point(class_scope:pro.beam.interactive.ProgressUpdate)
    private static final pro.beam.interactive.net.packet.Protocol.ProgressUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pro.beam.interactive.net.packet.Protocol.ProgressUpdate();
    }

    public static pro.beam.interactive.net.packet.Protocol.ProgressUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ProgressUpdate>
        PARSER = new com.google.protobuf.AbstractParser<ProgressUpdate>() {
      public ProgressUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new ProgressUpdate(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    public static com.google.protobuf.Parser<ProgressUpdate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProgressUpdate> getParserForType() {
      return PARSER;
    }

    public pro.beam.interactive.net.packet.Protocol.ProgressUpdate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Handshake_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Handshake_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_HandshakeACK_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_Info_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_Info_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Report_TactileInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_Error_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_Error_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_ProgressUpdate_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_pro_beam_interactive_ProgressUpdate_Progress_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_pro_beam_interactive_ProgressUpdate_Progress_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037src/main/resources/tetris.proto\022\024pro.b" +
      "eam.interactive\"/\n\tHandshake\022\017\n\007channel\030" +
      "\001 \002(\r\022\021\n\tstreamKey\030\002 \002(\t\"\016\n\014HandshakeACK" +
      "\"\373\003\n\006Report\022\016\n\006quorum\030\001 \002(\r\022\021\n\tconnected" +
      "\030\002 \002(\r\022\014\n\004time\030\003 \002(\r\022;\n\010joystick\030\004 \003(\0132)" +
      ".pro.beam.interactive.Report.JoystickInf" +
      "o\0229\n\007tactile\030\005 \003(\0132(.pro.beam.interactiv" +
      "e.Report.TactileInfo\032|\n\004Info\022\021\n\tfrequenc" +
      "y\030\001 \001(\001\022\014\n\004mean\030\002 \001(\001\022\r\n\005stdev\030\003 \001(\001\022\025\n\r" +
      "upperQuartile\030\004 \001(\001\022\025\n\rlowerQuartile\030\005 \001",
      "(\001\022\026\n\016normalizedMean\030\006 \001(\001\032M\n\014JoystickIn" +
      "fo\022\014\n\004axis\030\001 \002(\r\022/\n\004info\030\002 \002(\0132!.pro.bea" +
      "m.interactive.Report.Info\032{\n\013TactileInfo" +
      "\022\014\n\004code\030\001 \002(\r\022-\n\002up\030\002 \001(\0132!.pro.beam.in" +
      "teractive.Report.Info\022/\n\004down\030\003 \001(\0132!.pr" +
      "o.beam.interactive.Report.Info\"\030\n\005Error\022" +
      "\017\n\007message\030\001 \002(\t\"\222\002\n\016ProgressUpdate\022?\n\010p" +
      "rogress\030\001 \003(\0132-.pro.beam.interactive.Pro" +
      "gressUpdate.Progress\032\276\001\n\010Progress\022H\n\006tar" +
      "get\030\001 \002(\01628.pro.beam.interactive.Progres",
      "sUpdate.Progress.TargetType\022\014\n\004code\030\002 \002(" +
      "\r\022\020\n\010progress\030\003 \001(\002\022\020\n\010cooldown\030\004 \001(\r\022\r\n" +
      "\005fired\030\005 \001(\010\"\'\n\nTargetType\022\013\n\007TACTILE\020\000\022" +
      "\014\n\010JOYSTICK\020\001B+\n\037pro.beam.interactive.ne" +
      "t.packetB\010Protocol"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_pro_beam_interactive_Handshake_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_pro_beam_interactive_Handshake_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Handshake_descriptor,
        new java.lang.String[] { "Channel", "StreamKey", });
    internal_static_pro_beam_interactive_HandshakeACK_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_pro_beam_interactive_HandshakeACK_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_HandshakeACK_descriptor,
        new java.lang.String[] { });
    internal_static_pro_beam_interactive_Report_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_pro_beam_interactive_Report_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_descriptor,
        new java.lang.String[] { "Quorum", "Connected", "Time", "Joystick", "Tactile", });
    internal_static_pro_beam_interactive_Report_Info_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(0);
    internal_static_pro_beam_interactive_Report_Info_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_Info_descriptor,
        new java.lang.String[] { "Frequency", "Mean", "Stdev", "UpperQuartile", "LowerQuartile", "NormalizedMean", });
    internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(1);
    internal_static_pro_beam_interactive_Report_JoystickInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_JoystickInfo_descriptor,
        new java.lang.String[] { "Axis", "Info", });
    internal_static_pro_beam_interactive_Report_TactileInfo_descriptor =
      internal_static_pro_beam_interactive_Report_descriptor.getNestedTypes().get(2);
    internal_static_pro_beam_interactive_Report_TactileInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Report_TactileInfo_descriptor,
        new java.lang.String[] { "Code", "Up", "Down", });
    internal_static_pro_beam_interactive_Error_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_pro_beam_interactive_Error_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_Error_descriptor,
        new java.lang.String[] { "Message", });
    internal_static_pro_beam_interactive_ProgressUpdate_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_pro_beam_interactive_ProgressUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_ProgressUpdate_descriptor,
        new java.lang.String[] { "Progress", });
    internal_static_pro_beam_interactive_ProgressUpdate_Progress_descriptor =
      internal_static_pro_beam_interactive_ProgressUpdate_descriptor.getNestedTypes().get(0);
    internal_static_pro_beam_interactive_ProgressUpdate_Progress_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_pro_beam_interactive_ProgressUpdate_Progress_descriptor,
        new java.lang.String[] { "Target", "Code", "Progress", "Cooldown", "Fired", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
